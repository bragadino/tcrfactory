["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "],"~$Web3",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$cljs-web3.core","~:imports",null,"~:requires",["^ ","~$u","~$cljs-web3.utils","^<","^<"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$js-apply","^<","~$js-prototype-apply","^<"],"~:defs",["^ ","~$pad-left",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/core.cljs","~:line",279,"~:column",7,"~:end-line",279,"~:end-column",15,"~:arglists",["~#list",["~$quote",["^K",[["~$string","~$chars"],["^M","^N","~$sign"],["^4","^M","^N","^O"]]]]],"~:doc","Returns input string with zeroes or sign padded to the left.\n\n  Parameters:\n  string - String to be padded\n  chars  - Amount of chars to address\n  sign   - (optional) Char to pad with (behaviour with multiple chars is\n                      undefined)\n  Web3   - (optional first argument) Web3 JavaScript object.\n\n  Example:\n  user> `(web3/pad-left \"foo\" 8)`\n  \"00000foo\"\n  user> `(web3/pad-left \"foo\" 8 \"b\")`\n  \"bbbbbfoo\" ","~:top-fn",["^ ","~:variadic",false,"~:max-fixed-arity",4,"~:method-params",["^K",[["^M","^N"],["^M","^N","^O"],["^4","^M","^N","^O"]]],"^J",["^K",[["^M","^N"],["^M","^N","^O"],["^4","^M","^N","^O"]]],"~:arglists-meta",["^K",[null,null,null]]]],"^8","~$cljs-web3.core/pad-left","^R",false,"^E","resources/public/js/compiled/out/cljs_web3/core.cljs","^I",15,"^Q",["^ ","^R",false,"^S",4,"^T",["^K",[["^M","^N"],["^M","^N","^O"],["^4","^M","^N","^O"]]],"^J",["^K",[["^M","^N"],["^M","^N","^O"],["^4","^M","^N","^O"]]],"^U",["^K",[null,null,null]]],"^T",["^K",[["^M","^N"],["^M","^N","^O"],["^4","^M","^N","^O"]]],"~:protocol-impl",null,"^U",["^K",[null,null,null]],"^G",1,"^F",279,"^H",279,"^S",4,"~:fn-var",true,"^J",["^K",[["^M","^N"],["^M","^N","^O"],["^4","^M","^N","^O"]]],"^P","Returns input string with zeroes or sign padded to the left.\n\n  Parameters:\n  string - String to be padded\n  chars  - Amount of chars to address\n  sign   - (optional) Char to pad with (behaviour with multiple chars is\n                      undefined)\n  Web3   - (optional first argument) Web3 JavaScript object.\n\n  Example:\n  user> `(web3/pad-left \"foo\" 8)`\n  \"00000foo\"\n  user> `(web3/pad-left \"foo\" 8 \"b\")`\n  \"bbbbbfoo\" "],"~$set-provider",["^ ","^C",null,"^D",["^ ","^E","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/core.cljs","^F",360,"^G",7,"^H",360,"^I",19,"^J",["^K",["^L",["^K",[["~$web3","~$provider"]]]]],"^P","Should be called to set provider.\n\n  Parameters:\n  web3     - Web3 instance\n  provider - the provider\n\n  Available providers in web3-cljs:\n  - `http-provider`\n  - `ipc-provider`\n\n  Example:\n  user> `(set-provider web3-instance\n                       (http-provider web3-instance \"http://localhost:8545\"))`\n  nil"],"^8","~$cljs-web3.core/set-provider","^R",false,"^E","resources/public/js/compiled/out/cljs_web3/core.cljs","^I",19,"^T",["^K",[["^Z","^["]]],"^W",null,"^U",["^K",[null,null]],"^G",1,"^F",360,"^H",360,"^S",2,"^X",true,"^J",["^K",["^L",["^K",[["^Z","^["]]]]],"^P","Should be called to set provider.\n\n  Parameters:\n  web3     - Web3 instance\n  provider - the provider\n\n  Available providers in web3-cljs:\n  - `http-provider`\n  - `ipc-provider`\n\n  Example:\n  user> `(set-provider web3-instance\n                       (http-provider web3-instance \"http://localhost:8545\"))`\n  nil"],"~$version-ethereum",["^ ","^8","~$cljs-web3.core/version-ethereum","^E","resources/public/js/compiled/out/cljs_web3/core.cljs","^F",71,"^G",1,"^H",71,"^I",22,"^D",["^ ","^E","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/core.cljs","^F",71,"^G",6,"^H",71,"^I",22],"^P","Returns a hexadecimal string representing the Ethereum protocol version.\n\n  Parameters:\n  web3        - web3 instance\n  callback-fn - callback with two parameters, error and result\n\n  Example:\n  user> `(version-ethereum web3-instance\n           (fn [err res] (when-not err (println res))))`\n  nil\n  user> 0x3f","~:tag","~$any"],"~$ipc-provider",["^ ","^C",null,"^D",["^ ","^E","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/core.cljs","^F",396,"^G",7,"^H",396,"^I",19,"^J",["^K",["^L",["^K",[["^4","~$uri"]]]]]],"^8","~$cljs-web3.core/ipc-provider","^R",false,"^E","resources/public/js/compiled/out/cljs_web3/core.cljs","^I",19,"^T",["^K",[["^4","^16"]]],"^W",null,"^U",["^K",[null,null]],"^G",1,"^F",396,"^H",396,"^S",2,"^X",true,"^J",["^K",["^L",["^K",[["^4","^16"]]]]]],"~$address?",["^ ","^C",null,"^D",["^ ","^E","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/core.cljs","^F",319,"^G",7,"^H",319,"^I",15,"^J",["^K",["^L",["^K",[["~$address"],["^4","^19"]]]]],"^P","Returns a boolean indicating if the given string is an address.\n\n  Parameters:\n  address - An HEX string.\n  Web3    - (Optional first argument) Web3 JavaScript object\n\n  Returns false if it's not on a valid address format. Returns true if it's an\n  all lowercase or all uppercase valid address. If it's a mixed case address, it\n  checks using web3's isChecksumAddress().\n\n  Example:\n  user> `(address? \"0x8888f1f195afa192cfee860698584c030f4c9db1\")`\n  true\n\n  ;; With first f capitalized\n  user> `(web3/address? \"0x8888F1f195afa192cfee860698584c030f4c9db1\")`\n  false","^Q",["^ ","^R",false,"^S",2,"^T",["^K",[["^19"],["^4","^19"]]],"^J",["^K",[["^19"],["^4","^19"]]],"^U",["^K",[null,null]]]],"^8","~$cljs-web3.core/address?","^R",false,"^E","resources/public/js/compiled/out/cljs_web3/core.cljs","^I",15,"^Q",["^ ","^R",false,"^S",2,"^T",["^K",[["^19"],["^4","^19"]]],"^J",["^K",[["^19"],["^4","^19"]]],"^U",["^K",[null,null]]],"^T",["^K",[["^19"],["^4","^19"]]],"^W",null,"^U",["^K",[null,null]],"^G",1,"^F",319,"^H",319,"^S",2,"^X",true,"^J",["^K",[["^19"],["^4","^19"]]],"^P","Returns a boolean indicating if the given string is an address.\n\n  Parameters:\n  address - An HEX string.\n  Web3    - (Optional first argument) Web3 JavaScript object\n\n  Returns false if it's not on a valid address format. Returns true if it's an\n  all lowercase or all uppercase valid address. If it's a mixed case address, it\n  checks using web3's isChecksumAddress().\n\n  Example:\n  user> `(address? \"0x8888f1f195afa192cfee860698584c030f4c9db1\")`\n  true\n\n  ;; With first f capitalized\n  user> `(web3/address? \"0x8888F1f195afa192cfee860698584c030f4c9db1\")`\n  false"],"~$from-ascii",["^ ","^C",null,"^D",["^ ","^E","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/core.cljs","^F",173,"^G",7,"^H",173,"^I",17,"^J",["^K",["^L",["^K",[["^M"],["^M","~$padding"],["^4","^M","^1<"]]]]],"^P","Converts any ASCII string to a HEX string.\n\n  Parameters:\n  string  - An ASCII string to be converted to HEX.\n  padding - (optional) The number of bytes the returned HEX string should have.\n  Web3    - (optional first argument) Web3 JavaScript object.\n\n  Example:\n  user> `(from-ascii \"ethereum\")`\n  \"0x657468657265756d\"\n  user> `(from-ascii \"ethereum\")`\n  \"0x657468657265756d000000000000000000000000000000000000000000000000\"\n\n  NOTE: The latter is intended behaviour. Because of a bug in Web3 the padding\n        is not added. See https://github.com/ethereum/web3.js/issues/337","^Q",["^ ","^R",false,"^S",3,"^T",["^K",[["^M"],["^M","^1<"],["^4","^M","^1<"]]],"^J",["^K",[["^M"],["^M","^1<"],["^4","^M","^1<"]]],"^U",["^K",[null,null,null]]]],"^8","~$cljs-web3.core/from-ascii","^R",false,"^E","resources/public/js/compiled/out/cljs_web3/core.cljs","^I",17,"^Q",["^ ","^R",false,"^S",3,"^T",["^K",[["^M"],["^M","^1<"],["^4","^M","^1<"]]],"^J",["^K",[["^M"],["^M","^1<"],["^4","^M","^1<"]]],"^U",["^K",[null,null,null]]],"^T",["^K",[["^M"],["^M","^1<"],["^4","^M","^1<"]]],"^W",null,"^U",["^K",[null,null,null]],"^G",1,"^F",173,"^H",173,"^S",3,"^X",true,"^J",["^K",[["^M"],["^M","^1<"],["^4","^M","^1<"]]],"^P","Converts any ASCII string to a HEX string.\n\n  Parameters:\n  string  - An ASCII string to be converted to HEX.\n  padding - (optional) The number of bytes the returned HEX string should have.\n  Web3    - (optional first argument) Web3 JavaScript object.\n\n  Example:\n  user> `(from-ascii \"ethereum\")`\n  \"0x657468657265756d\"\n  user> `(from-ascii \"ethereum\")`\n  \"0x657468657265756d000000000000000000000000000000000000000000000000\"\n\n  NOTE: The latter is intended behaviour. Because of a bug in Web3 the padding\n        is not added. See https://github.com/ethereum/web3.js/issues/337"],"~$version-whisper",["^ ","^8","~$cljs-web3.core/version-whisper","^E","resources/public/js/compiled/out/cljs_web3/core.cljs","^F",86,"^G",1,"^H",86,"^I",21,"^D",["^ ","^E","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/core.cljs","^F",86,"^G",6,"^H",86,"^I",21],"^P","Returns a string representing the Whisper protocol version.\n\n  Parameters:\n  web3        - web3 instance\n  callback-fn - callback with two parameters, error and result\n\n  Example:\n  user> `(version-whisper\n           web3-instance\n           (fn [err res] (when-not err (println res))))`\n  nil\n  user> 20","^13","^14"],"~$create-web3",["^ ","^C",null,"^D",["^ ","^E","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/core.cljs","^F",400,"^G",7,"^H",400,"^I",18,"^J",["^K",["^L",["^K",[["~$url"],["^4","^1A"]]]]],"^P","Creates a web3 instance using an `http-provider`.\n\n  Parameters:\n  url  - The URL string for which to create the provider.\n  Web3 - (Optional first argument) Web3 JavaScript object\n\n  Example:\n  user> `(create-web3 \"http://localhost:8545/\")`\n  <web3 instance>","^Q",["^ ","^R",false,"^S",2,"^T",["^K",[["^1A"],["^4","^1A"]]],"^J",["^K",[["^1A"],["^4","^1A"]]],"^U",["^K",[null,null]]]],"^8","~$cljs-web3.core/create-web3","^R",false,"^E","resources/public/js/compiled/out/cljs_web3/core.cljs","^I",18,"^Q",["^ ","^R",false,"^S",2,"^T",["^K",[["^1A"],["^4","^1A"]]],"^J",["^K",[["^1A"],["^4","^1A"]]],"^U",["^K",[null,null]]],"^T",["^K",[["^1A"],["^4","^1A"]]],"^W",null,"^U",["^K",[null,null]],"^G",1,"^F",400,"^H",400,"^S",2,"^X",true,"^J",["^K",[["^1A"],["^4","^1A"]]],"^P","Creates a web3 instance using an `http-provider`.\n\n  Parameters:\n  url  - The URL string for which to create the provider.\n  Web3 - (Optional first argument) Web3 JavaScript object\n\n  Example:\n  user> `(create-web3 \"http://localhost:8545/\")`\n  <web3 instance>"],"~$to-hex",["^ ","^C",null,"^D",["^ ","^E","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/core.cljs","^F",142,"^G",7,"^H",142,"^I",13,"^J",["^K",["^L",["^K",[["^14"],["^4","^14"]]]]],"^P","Returns hexadecimal string representation of any value\n  string|number|map|set|BigNumber.\n\n  Parameters:\n  Any  - The value to parse\n  Web3 - (optional first argument) Web3 JavaScript object.\n\n  Example:\n  user> `(to-hex \"foo\")`\n  \"0x666f6f\" ","^Q",["^ ","^R",false,"^S",2,"^T",["^K",[["^14"],["^4","^14"]]],"^J",["^K",[["^14"],["^4","^14"]]],"^U",["^K",[null,null]]]],"^8","~$cljs-web3.core/to-hex","^R",false,"^E","resources/public/js/compiled/out/cljs_web3/core.cljs","^I",13,"^Q",["^ ","^R",false,"^S",2,"^T",["^K",[["^14"],["^4","^14"]]],"^J",["^K",[["^14"],["^4","^14"]]],"^U",["^K",[null,null]]],"^T",["^K",[["^14"],["^4","^14"]]],"^W",null,"^U",["^K",[null,null]],"^G",1,"^F",142,"^H",142,"^S",2,"^X",true,"^J",["^K",[["^14"],["^4","^14"]]],"^P","Returns hexadecimal string representation of any value\n  string|number|map|set|BigNumber.\n\n  Parameters:\n  Any  - The value to parse\n  Web3 - (optional first argument) Web3 JavaScript object.\n\n  Example:\n  user> `(to-hex \"foo\")`\n  \"0x666f6f\" "],"~$version-network",["^ ","^8","~$cljs-web3.core/version-network","^E","resources/public/js/compiled/out/cljs_web3/core.cljs","^F",51,"^G",1,"^H",51,"^I",21,"^D",["^ ","^E","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/core.cljs","^F",51,"^G",6,"^H",51,"^I",21],"^P","Returns a string representing the network protocol version.\n\n  \"1\"  is Main Net or Local Net\n  \"2\"  is (Deprecated) Morden Network\n  \"3\"  is Ropsten Test Net\n  \"4\"  is Rinkeby Test Net\n  \"42\" is Kovan Test Net\n\n  Parameters:\n  Web3        - Web3 instance\n  callback-fn - callback with two parameters, error and result\n\n  Example:\n  user> `(version-network web3-instance\n           (fn [err res] (when-not err (println res))))`\n  nil\n  user> 3","^13","^14"],"~$connected?",["^ ","^C",null,"^D",["^ ","^E","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/core.cljs","^F",102,"^G",7,"^H",102,"^I",17,"^J",["^K",["^L",["^K",[["^Z"]]]]],"^P","Returns a boolean indicating if a connection to a node exists.\n\n  Parameters:\n  web3        - web3 instance\n  callback-fn - callback with two parameters, error and result\n\n  Example:\n  user> `(connected? web3-instance)`\n  true"],"^8","~$cljs-web3.core/connected?","^R",false,"^E","resources/public/js/compiled/out/cljs_web3/core.cljs","^I",17,"^T",["^K",[["^Z"]]],"^W",null,"^U",["^K",[null,null]],"^G",1,"^F",102,"^H",102,"^S",1,"^X",true,"^J",["^K",["^L",["^K",[["^Z"]]]]],"^P","Returns a boolean indicating if a connection to a node exists.\n\n  Parameters:\n  web3        - web3 instance\n  callback-fn - callback with two parameters, error and result\n\n  Example:\n  user> `(connected? web3-instance)`\n  true"],"~$reset",["^ ","^C",null,"^D",["^ ","^E","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/core.cljs","^F",341,"^G",7,"^H",341,"^I",12,"^J",["^K",["^L",["^K",[["^Z"],["^Z","~$keep-is-syncing?"]]]]],"^P","Should be called to reset the state of web3. Resets everything except the manager.\n  Uninstalls all filters. Stops polling.\n\n  Parameters:\n  web3             - An instance of web3\n  keep-is-syncing? - If true it will uninstall all filters, but will keep the\n                     web3.eth.isSyncing() polls\n\n  Returns nil.\n\n  Example:\n  user> `(reset web3-instance true)`\n  nil","^Q",["^ ","^R",false,"^S",2,"^T",["^K",[["^Z"],["^Z","^1J"]]],"^J",["^K",[["^Z"],["^Z","^1J"]]],"^U",["^K",[null,null]]]],"^8","~$cljs-web3.core/reset","^R",false,"^E","resources/public/js/compiled/out/cljs_web3/core.cljs","^I",12,"^Q",["^ ","^R",false,"^S",2,"^T",["^K",[["^Z"],["^Z","^1J"]]],"^J",["^K",[["^Z"],["^Z","^1J"]]],"^U",["^K",[null,null]]],"^T",["^K",[["^Z"],["^Z","^1J"]]],"^W",null,"^U",["^K",[null,null]],"^G",1,"^F",341,"^H",341,"^S",2,"^X",true,"^J",["^K",[["^Z"],["^Z","^1J"]]],"^P","Should be called to reset the state of web3. Resets everything except the manager.\n  Uninstalls all filters. Stops polling.\n\n  Parameters:\n  web3             - An instance of web3\n  keep-is-syncing? - If true it will uninstall all filters, but will keep the\n                     web3.eth.isSyncing() polls\n\n  Returns nil.\n\n  Example:\n  user> `(reset web3-instance true)`\n  nil"],"~$http-provider",["^ ","^C",null,"^D",["^ ","^E","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/core.cljs","^F",392,"^G",7,"^H",392,"^I",20,"^J",["^K",["^L",["^K",[["^4","^16"]]]]]],"^8","~$cljs-web3.core/http-provider","^R",false,"^E","resources/public/js/compiled/out/cljs_web3/core.cljs","^I",20,"^T",["^K",[["^4","^16"]]],"^W",null,"^U",["^K",[null,null]],"^G",1,"^F",392,"^H",392,"^S",2,"^X",true,"^J",["^K",["^L",["^K",[["^4","^16"]]]]]],"~$to-wei",["^ ","^C",null,"^D",["^ ","^E","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/core.cljs","^F",244,"^G",7,"^H",244,"^I",13,"^J",["^K",["^L",["^K",[["~$number","~$unit"],["^4","^1O","^1P"]]]]],"^P","Converts an Ethereum unit into Wei.\n\n  Parameters:\n  number - A number or BigNumber instance.\n  unit   - One of :noether :wei :kwei :Kwei :babbage :femtoether :mwei :Mwei\n           :lovelace :picoether :gwei :Gwei :shannon :nanoether :nano :szabo\n           :microether :micro :finney :milliether :milli :ether :kether :grand\n           :mether :gether :tether\n  Web3   - (optional first argument) Web3 JavaScript object.\n\n  Returns either a number string, or a BigNumber instance, depending on the\n  given number parameter.\n\n  Example:\n  user> `(web3/to-wei 10 :ether)`\n  \"10000000000000000000\"","^Q",["^ ","^R",false,"^S",3,"^T",["^K",[["^1O","^1P"],["^4","^1O","^1P"]]],"^J",["^K",[["^1O","^1P"],["^4","^1O","^1P"]]],"^U",["^K",[null,null]]]],"^8","~$cljs-web3.core/to-wei","^R",false,"^E","resources/public/js/compiled/out/cljs_web3/core.cljs","^I",13,"^Q",["^ ","^R",false,"^S",3,"^T",["^K",[["^1O","^1P"],["^4","^1O","^1P"]]],"^J",["^K",[["^1O","^1P"],["^4","^1O","^1P"]]],"^U",["^K",[null,null]]],"^T",["^K",[["^1O","^1P"],["^4","^1O","^1P"]]],"^W",null,"^U",["^K",[null,null]],"^G",1,"^F",244,"^H",244,"^S",3,"^X",true,"^J",["^K",[["^1O","^1P"],["^4","^1O","^1P"]]],"^P","Converts an Ethereum unit into Wei.\n\n  Parameters:\n  number - A number or BigNumber instance.\n  unit   - One of :noether :wei :kwei :Kwei :babbage :femtoether :mwei :Mwei\n           :lovelace :picoether :gwei :Gwei :shannon :nanoether :nano :szabo\n           :microether :micro :finney :milliether :milli :ether :kether :grand\n           :mether :gether :tether\n  Web3   - (optional first argument) Web3 JavaScript object.\n\n  Returns either a number string, or a BigNumber instance, depending on the\n  given number parameter.\n\n  Example:\n  user> `(web3/to-wei 10 :ether)`\n  \"10000000000000000000\""],"~$to-decimal",["^ ","^C",null,"^D",["^ ","^E","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/core.cljs","^F",195,"^G",7,"^H",195,"^I",17,"^J",["^K",["^L",["^K",[["~$hex-string"],["^4","^1S"]]]]],"^P","Returns the number representing a HEX string in its number representation.\n\n  Parameters:\n  hex-string - An HEX string to be converted to a number.\n  Web3       - (optional first argument) Web3 JavaScript object.\n\n  Example:\n  user> `(to-decimal \"0x15\")`\n  21","^Q",["^ ","^R",false,"^S",2,"^T",["^K",[["^1S"],["^4","^1S"]]],"^J",["^K",[["^1S"],["^4","^1S"]]],"^U",["^K",[null,null]]]],"^8","~$cljs-web3.core/to-decimal","^R",false,"^E","resources/public/js/compiled/out/cljs_web3/core.cljs","^I",17,"^Q",["^ ","^R",false,"^S",2,"^T",["^K",[["^1S"],["^4","^1S"]]],"^J",["^K",[["^1S"],["^4","^1S"]]],"^U",["^K",[null,null]]],"^T",["^K",[["^1S"],["^4","^1S"]]],"^W",null,"^U",["^K",[null,null]],"^G",1,"^F",195,"^H",195,"^S",2,"^X",true,"^J",["^K",[["^1S"],["^4","^1S"]]],"^P","Returns the number representing a HEX string in its number representation.\n\n  Parameters:\n  hex-string - An HEX string to be converted to a number.\n  Web3       - (optional first argument) Web3 JavaScript object.\n\n  Example:\n  user> `(to-decimal \"0x15\")`\n  21"],"~$current-provider",["^ ","^C",null,"^D",["^ ","^E","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/core.cljs","^F",378,"^G",7,"^H",378,"^I",23,"^J",["^K",["^L",["^K",[["^Z"]]]]],"^P","Will contain the current provider, if one is set. This can be used to check\n  if Mist etc. already set a provider.\n\n  Parameters:\n  web3 - web3 instance\n\n  Returns the provider set or nil."],"^8","~$cljs-web3.core/current-provider","^R",false,"^E","resources/public/js/compiled/out/cljs_web3/core.cljs","^I",23,"^T",["^K",[["^Z"]]],"^W",null,"^U",["^K",[null,null]],"^G",1,"^F",378,"^H",378,"^S",1,"^X",true,"^J",["^K",["^L",["^K",[["^Z"]]]]],"^P","Will contain the current provider, if one is set. This can be used to check\n  if Mist etc. already set a provider.\n\n  Parameters:\n  web3 - web3 instance\n\n  Returns the provider set or nil."],"~$version-node",["^ ","^8","~$cljs-web3.core/version-node","^E","resources/public/js/compiled/out/cljs_web3/core.cljs","^F",36,"^G",1,"^H",36,"^I",18,"^D",["^ ","^E","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/core.cljs","^F",36,"^G",6,"^H",36,"^I",18],"^P","Returns a string representing the client/node version.\n\n  Parameters:\n  Web3        - web3 instance\n  callback-fn - callback with two parameters, error and result\n\n  Example:\n  user> `(version-node web3-instance\n           (fn [err res] (when-not err (println res))))`\n  nil\n  user> MetaMask/v3.10.8","^13","^14"],"~$pad-right",["^ ","^C",null,"^D",["^ ","^E","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/core.cljs","^F",299,"^G",7,"^H",299,"^I",16,"^J",["^K",["^L",["^K",[["^M","^N"],["^M","^N","^O"],["^4","^M","^N","^O"]]]]],"^P","Returns input string with zeroes or sign padded to the right.\n\n  Parameters:\n  string - String to be padded\n  chars  - Amount of total chars\n  sign   - (optional) Char to pad with (behaviour with multiple chars is\n                      undefined)\n  Web3   - (optional first argument) Web3 instance\n\n  Example:\n  user> `(web3/pad-right \"foo\" 8)`\n  \"foo00000\"\n  user> `(web3/pad-right \"foo\" 8 \"b\")`\n  \"foobbbbb\" ","^Q",["^ ","^R",false,"^S",4,"^T",["^K",[["^M","^N"],["^M","^N","^O"],["^4","^M","^N","^O"]]],"^J",["^K",[["^M","^N"],["^M","^N","^O"],["^4","^M","^N","^O"]]],"^U",["^K",[null,null,null]]]],"^8","~$cljs-web3.core/pad-right","^R",false,"^E","resources/public/js/compiled/out/cljs_web3/core.cljs","^I",16,"^Q",["^ ","^R",false,"^S",4,"^T",["^K",[["^M","^N"],["^M","^N","^O"],["^4","^M","^N","^O"]]],"^J",["^K",[["^M","^N"],["^M","^N","^O"],["^4","^M","^N","^O"]]],"^U",["^K",[null,null,null]]],"^T",["^K",[["^M","^N"],["^M","^N","^O"],["^4","^M","^N","^O"]]],"^W",null,"^U",["^K",[null,null,null]],"^G",1,"^F",299,"^H",299,"^S",4,"^X",true,"^J",["^K",[["^M","^N"],["^M","^N","^O"],["^4","^M","^N","^O"]]],"^P","Returns input string with zeroes or sign padded to the right.\n\n  Parameters:\n  string - String to be padded\n  chars  - Amount of total chars\n  sign   - (optional) Char to pad with (behaviour with multiple chars is\n                      undefined)\n  Web3   - (optional first argument) Web3 instance\n\n  Example:\n  user> `(web3/pad-right \"foo\" 8)`\n  \"foo00000\"\n  user> `(web3/pad-right \"foo\" 8 \"b\")`\n  \"foobbbbb\" "],"~$sha3",["^ ","^C",null,"^D",["^ ","^E","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/core.cljs","^F",116,"^G",7,"^H",116,"^I",11,"^J",["^K",["^L",["^K",[["^M"],["^M","~$options"],["^4","^M","^20"]]]]],"^P","Returns a string representing the Keccak-256 SHA3 of the given data.\n\n  Parameters:\n  String - The string to hash using the Keccak-256 SHA3 algorithm\n  Map    - (optional) Set encoding to hex if the string to hash is encoded\n                      in hex. A leading 0x will be automatically ignored.\n  Web3   - (optional first argument) Web3 JavaScript object.\n\n  Example:\n  user> (def hash \"Some string to be hashed\")\n  #'user/hash\n  user> `(sha3 hash)\n  \"0xed973b234cf2238052c9ac87072c71bcf33abc1bbd721018e0cca448ef79b379\"`\n  user> `(sha3 hash {:encoding :hex})`\n  \"0xbd83a94d23235dd7dfcf67a5a0d9e9643a715cd5b528083a2cf944d61f8e7b51\"\n\n  NOTE: This differs from the documented result of the Web3 JavaScript API,\n  which equals\n  \"0x85dd39c91a64167ba20732b228251e67caed1462d4bcf036af88dc6856d0fdcc\"","^Q",["^ ","^R",false,"^S",3,"^T",["^K",[["^M"],["^M","^20"],["^4","^M","^20"]]],"^J",["^K",[["^M"],["^M","^20"],["^4","^M","^20"]]],"^U",["^K",[null,null,null]]]],"^8","~$cljs-web3.core/sha3","^R",false,"^E","resources/public/js/compiled/out/cljs_web3/core.cljs","^I",11,"^Q",["^ ","^R",false,"^S",3,"^T",["^K",[["^M"],["^M","^20"],["^4","^M","^20"]]],"^J",["^K",[["^M"],["^M","^20"],["^4","^M","^20"]]],"^U",["^K",[null,null,null]]],"^T",["^K",[["^M"],["^M","^20"],["^4","^M","^20"]]],"^W",null,"^U",["^K",[null,null,null]],"^G",1,"^F",116,"^H",116,"^S",3,"^X",true,"^J",["^K",[["^M"],["^M","^20"],["^4","^M","^20"]]],"^P","Returns a string representing the Keccak-256 SHA3 of the given data.\n\n  Parameters:\n  String - The string to hash using the Keccak-256 SHA3 algorithm\n  Map    - (optional) Set encoding to hex if the string to hash is encoded\n                      in hex. A leading 0x will be automatically ignored.\n  Web3   - (optional first argument) Web3 JavaScript object.\n\n  Example:\n  user> (def hash \"Some string to be hashed\")\n  #'user/hash\n  user> `(sha3 hash)\n  \"0xed973b234cf2238052c9ac87072c71bcf33abc1bbd721018e0cca448ef79b379\"`\n  user> `(sha3 hash {:encoding :hex})`\n  \"0xbd83a94d23235dd7dfcf67a5a0d9e9643a715cd5b528083a2cf944d61f8e7b51\"\n\n  NOTE: This differs from the documented result of the Web3 JavaScript API,\n  which equals\n  \"0x85dd39c91a64167ba20732b228251e67caed1462d4bcf036af88dc6856d0fdcc\""],"~$to-big-number",["^ ","^C",null,"^D",["^ ","^E","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/core.cljs","^F",265,"^G",7,"^H",265,"^I",20,"^J",["^K",["^L",["^K",[["~$number-or-hex-string"],["^4","^23"]]]]],"^P","Converts a given number into a BigNumber instance.\n\n  Parameters:\n  number-or-hex-string - A number, number string or HEX string of a number.\n  Web3                 - (optional first argument) Web3 JavaScript object.\n\n  Example:\n  user> `(to-big-number \"10000000000000000000\")`\n  <An instance of BigNumber>","^Q",["^ ","^R",false,"^S",2,"^T",["^K",[["^23"],["^4","^23"]]],"^J",["^K",[["^23"],["^4","^23"]]],"^U",["^K",[null,null]]]],"^8","~$cljs-web3.core/to-big-number","^R",false,"^E","resources/public/js/compiled/out/cljs_web3/core.cljs","^I",20,"^Q",["^ ","^R",false,"^S",2,"^T",["^K",[["^23"],["^4","^23"]]],"^J",["^K",[["^23"],["^4","^23"]]],"^U",["^K",[null,null]]],"^T",["^K",[["^23"],["^4","^23"]]],"^W",null,"^U",["^K",[null,null]],"^G",1,"^F",265,"^H",265,"^S",2,"^X",true,"^J",["^K",[["^23"],["^4","^23"]]],"^P","Converts a given number into a BigNumber instance.\n\n  Parameters:\n  number-or-hex-string - A number, number string or HEX string of a number.\n  Web3                 - (optional first argument) Web3 JavaScript object.\n\n  Example:\n  user> `(to-big-number \"10000000000000000000\")`\n  <An instance of BigNumber>"],"~$version-api",["^ ","^8","~$cljs-web3.core/version-api","^E","resources/public/js/compiled/out/cljs_web3/core.cljs","^F",21,"^G",1,"^H",21,"^I",17,"^D",["^ ","^E","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/core.cljs","^F",21,"^G",6,"^H",21,"^I",17],"^P","Returns a string representing the Ethereum js api version.\n\n  Parameters:\n  Web3        - web3 instance\n  callback-fn - callback with two parameters, error and result\n\n  Example:\n  user> `(web3/version-node web3-instance\n           (fn [err res] (when-not err (println res))))`\n  nil\n  user> 0.2.0","^13","^14"],"~$from-wei",["^ ","^C",null,"^D",["^ ","^E","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/core.cljs","^F",223,"^G",7,"^H",223,"^I",15,"^J",["^K",["^L",["^K",[["^1O","^1P"],["^4","^1O","^1P"]]]]],"^P","Converts a number of Wei into an Ethereum unit.\n\n  Parameters:\n  number - A number or BigNumber instance.\n  unit   - One of :noether :wei :kwei :Kwei :babbage :femtoether :mwei :Mwei\n           :lovelace :picoether :gwei :Gwei :shannon :nanoether :nano :szabo\n           :microether :micro :finney :milliether :milli :ether :kether :grand\n           :mether :gether :tether\n  Web3   - (optional first argument) Web3 JavaScript object.\n\n  Returns either a number string, or a BigNumber instance, depending on the\n  given number parameter.\n\n  Example:\n  user> `(web3/from-wei 10 :ether)`\n  \"0.00000000000000001\"","^Q",["^ ","^R",false,"^S",3,"^T",["^K",[["^1O","^1P"],["^4","^1O","^1P"]]],"^J",["^K",[["^1O","^1P"],["^4","^1O","^1P"]]],"^U",["^K",[null,null]]]],"^8","~$cljs-web3.core/from-wei","^R",false,"^E","resources/public/js/compiled/out/cljs_web3/core.cljs","^I",15,"^Q",["^ ","^R",false,"^S",3,"^T",["^K",[["^1O","^1P"],["^4","^1O","^1P"]]],"^J",["^K",[["^1O","^1P"],["^4","^1O","^1P"]]],"^U",["^K",[null,null]]],"^T",["^K",[["^1O","^1P"],["^4","^1O","^1P"]]],"^W",null,"^U",["^K",[null,null]],"^G",1,"^F",223,"^H",223,"^S",3,"^X",true,"^J",["^K",[["^1O","^1P"],["^4","^1O","^1P"]]],"^P","Converts a number of Wei into an Ethereum unit.\n\n  Parameters:\n  number - A number or BigNumber instance.\n  unit   - One of :noether :wei :kwei :Kwei :babbage :femtoether :mwei :Mwei\n           :lovelace :picoether :gwei :Gwei :shannon :nanoether :nano :szabo\n           :microether :micro :finney :milliether :milli :ether :kether :grand\n           :mether :gether :tether\n  Web3   - (optional first argument) Web3 JavaScript object.\n\n  Returns either a number string, or a BigNumber instance, depending on the\n  given number parameter.\n\n  Example:\n  user> `(web3/from-wei 10 :ether)`\n  \"0.00000000000000001\""],"~$to-ascii",["^ ","^C",null,"^D",["^ ","^E","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/core.cljs","^F",158,"^G",7,"^H",158,"^I",15,"^J",["^K",["^L",["^K",[["^1S"],["^4","^1S"]]]]],"^P","Converts a HEX string into a ASCII string.\n\n  Parameters:\n  hex-string - A HEX string to be converted to ASCII.\n  Web3       - (optional first argument) Web3 JavaScript object.\n\n  Example:\n  user> `(to-ascii \"0x666f6f\")`\n  \"foo\" ","^Q",["^ ","^R",false,"^S",2,"^T",["^K",[["^1S"],["^4","^1S"]]],"^J",["^K",[["^1S"],["^4","^1S"]]],"^U",["^K",[null,null]]]],"^8","~$cljs-web3.core/to-ascii","^R",false,"^E","resources/public/js/compiled/out/cljs_web3/core.cljs","^I",15,"^Q",["^ ","^R",false,"^S",2,"^T",["^K",[["^1S"],["^4","^1S"]]],"^J",["^K",[["^1S"],["^4","^1S"]]],"^U",["^K",[null,null]]],"^T",["^K",[["^1S"],["^4","^1S"]]],"^W",null,"^U",["^K",[null,null]],"^G",1,"^F",158,"^H",158,"^S",2,"^X",true,"^J",["^K",[["^1S"],["^4","^1S"]]],"^P","Converts a HEX string into a ASCII string.\n\n  Parameters:\n  hex-string - A HEX string to be converted to ASCII.\n  Web3       - (optional first argument) Web3 JavaScript object.\n\n  Example:\n  user> `(to-ascii \"0x666f6f\")`\n  \"foo\" "],"~$from-decimal",["^ ","^C",null,"^D",["^ ","^E","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/core.cljs","^F",209,"^G",7,"^H",209,"^I",19,"^J",["^K",["^L",["^K",[["^1O"],["^4","^1O"]]]]],"^P","Converts a number or number string to its HEX representation.\n\n  Parameters:\n  number - A number to be converted to a HEX string.\n  Web3   - (optional first argument) Web3 JavaScript object.\n\n  Example:\n  user-> `(web3/from-decimal 21)`\n  \"0x15\"","^Q",["^ ","^R",false,"^S",2,"^T",["^K",[["^1O"],["^4","^1O"]]],"^J",["^K",[["^1O"],["^4","^1O"]]],"^U",["^K",[null,null]]]],"^8","~$cljs-web3.core/from-decimal","^R",false,"^E","resources/public/js/compiled/out/cljs_web3/core.cljs","^I",19,"^Q",["^ ","^R",false,"^S",2,"^T",["^K",[["^1O"],["^4","^1O"]]],"^J",["^K",[["^1O"],["^4","^1O"]]],"^U",["^K",[null,null]]],"^T",["^K",[["^1O"],["^4","^1O"]]],"^W",null,"^U",["^K",[null,null]],"^G",1,"^F",209,"^H",209,"^S",2,"^X",true,"^J",["^K",[["^1O"],["^4","^1O"]]],"^P","Converts a number or number string to its HEX representation.\n\n  Parameters:\n  number - A number to be converted to a HEX string.\n  Web3   - (optional first argument) Web3 JavaScript object.\n\n  Example:\n  user-> `(web3/from-decimal 21)`\n  \"0x15\""]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"^P","ClojureScript wrapper around Web3 JavaScript API methods on the Web3 object.\n\n  A `web3-instance` can be obtained in two ways:\n\n  1. Via the user's browser (when using Mist or MetaMask)\n\n  `(defn web3-instance []\n     (new (aget js/window \"Web3\")\n          (current-provider (aget js/window \"web3\"))))`\n\n  2. Created via `create-web3` (when running a local Ethereum node)\n\n  `(def web3-instance\n     (create-web3 \"http://localhost:8545/\"))`\n\n  The Web3 JavaScript object is provided on the browser window."]