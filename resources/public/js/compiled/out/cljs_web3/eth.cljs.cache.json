["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",["~$filter"]],"~:name","~$cljs-web3.eth","~:imports",null,"~:requires",["^ ","~$u","~$cljs-web3.utils","^:","^:"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$js-apply","^:","~$camel-case","^:"],"~:defs",["^ ","~$eth",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/eth.cljs","~:line",7,"~:column",7,"~:end-line",7,"~:end-column",10,"~:arglists",["~#list",["~$quote",["^I",[["~$web3"]]]]],"~:doc","Gets eth object from web3-instance.\n\n  Parameter:\n  web3 - web3 instance"],"^6","~$cljs-web3.eth/eth","~:variadic",false,"^C","resources/public/js/compiled/out/cljs_web3/eth.cljs","^G",10,"~:method-params",["^I",[["^K"]]],"~:protocol-impl",null,"~:arglists-meta",["^I",[null,null]],"^E",1,"^D",7,"^F",7,"~:max-fixed-arity",1,"~:fn-var",true,"^H",["^I",["^J",["^I",[["^K"]]]]],"^L","Gets eth object from web3-instance.\n\n  Parameter:\n  web3 - web3 instance"],"~$set-default-block!",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/eth.cljs","^D",94,"^E",7,"^F",94,"^G",25,"^H",["^I",["^J",["^I",[["^K","~$block"]]]]],"^L","Sets default block that is used for the following methods (optionally you can\n  override it by passing the default-block parameter):\n\n  - `get-balance`\n  - `get-code`\n  - `get-transactionCount`\n  - `get-storageAt`\n  - `call`\n  - `contract-call`\n  - `estimate-gas`\n\n  Parameters:\n  web3  - web3 instance\n  block - one of:\n            - a block number\n            - \"earliest\", the genisis block\n            - \"latest\", the latest block (current head of the blockchain)\n            - \"pending\", the currently mined block (including pending\n              transactions)\n\n  Example:\n  user> `(set-default-block! web3-instance \"earliest\")`\n  \"earliest\""],"^6","~$cljs-web3.eth/set-default-block!","^N",false,"^C","resources/public/js/compiled/out/cljs_web3/eth.cljs","^G",25,"^O",["^I",[["^K","^U"]]],"^P",null,"^Q",["^I",[null,null]],"^E",1,"^D",94,"^F",94,"^R",2,"^S",true,"^H",["^I",["^J",["^I",[["^K","^U"]]]]],"^L","Sets default block that is used for the following methods (optionally you can\n  override it by passing the default-block parameter):\n\n  - `get-balance`\n  - `get-code`\n  - `get-transactionCount`\n  - `get-storageAt`\n  - `call`\n  - `contract-call`\n  - `estimate-gas`\n\n  Parameters:\n  web3  - web3 instance\n  block - one of:\n            - a block number\n            - \"earliest\", the genisis block\n            - \"latest\", the latest block (current head of the blockchain)\n            - \"pending\", the currently mined block (including pending\n              transactions)\n\n  Example:\n  user> `(set-default-block! web3-instance \"earliest\")`\n  \"earliest\""],"~$get-transaction-from-block",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/eth.cljs","^D",509,"^E",7,"^F",509,"^G",33,"^H",["^I",["^J",["^I",[["^K","~$&",["~$block-hash-or-number","~$index","~:as","~$args"]]]]]],"^L","Returns a transaction based on a block hash or number and the transactions\n  index position.\n\n  Parameters:\n  web3                 - web3 instance\n  block-hash-or-number - A block number or hash. Or the string \"earliest\",\n                         \"latest\" or \"pending\" as in the default block\n                         parameter.\n  index                - The transactions index position.\n  callback-fn          - callback with two parameters, error and result\n  Number               - The transactions index position.\n\n  Returns a transaction object, see `(get-transaction)`\n\n  Example:\n  user> `(get-transaction-from-block\n           web3-instance\n           1799402\n           0\n           (fn [err res] (when-not err (println res))))`\n  nil\n  user> {:r 0x...\n         :v 0x2a\n         :hash 0xf...\n         :transaction-index 0 ...\n         (...)\n         :to 0x...}","~:top-fn",["^ ","^N",true,"^R",1,"^O",[["^I",["^K",["^X","^Y","^Z","^["]]]],"^H",["^I",[["^K","~$&",["^X","^Y","^Z","^["]]]],"^Q",["^I",[null]]]],"^6","~$cljs-web3.eth/get-transaction-from-block","^N",true,"^C","resources/public/js/compiled/out/cljs_web3/eth.cljs","^G",33,"^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^K",["^X","^Y","^Z","^["]]]],"^H",["^I",[["^K","~$&",["^X","^Y","^Z","^["]]]],"^Q",["^I",[null]]],"^O",[["^I",["^K",["^X","^Y","^Z","^["]]]],"^P",null,"^Q",["^I",[null]],"^E",1,"^D",509,"^F",509,"^R",1,"^S",true,"^H",["^I",[["^K","~$&",["^X","^Y","^Z","^["]]]],"^L","Returns a transaction based on a block hash or number and the transactions\n  index position.\n\n  Parameters:\n  web3                 - web3 instance\n  block-hash-or-number - A block number or hash. Or the string \"earliest\",\n                         \"latest\" or \"pending\" as in the default block\n                         parameter.\n  index                - The transactions index position.\n  callback-fn          - callback with two parameters, error and result\n  Number               - The transactions index position.\n\n  Returns a transaction object, see `(get-transaction)`\n\n  Example:\n  user> `(get-transaction-from-block\n           web3-instance\n           1799402\n           0\n           (fn [err res] (when-not err (println res))))`\n  nil\n  user> {:r 0x...\n         :v 0x2a\n         :hash 0xf...\n         :transaction-index 0 ...\n         (...)\n         :to 0x...}"],"~$default-account",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/eth.cljs","^D",25,"^E",7,"^F",25,"^G",22,"^H",["^I",["^J",["^I",[["^K"]]]]],"^L","Gets the default address that is used for the following methods (optionally\n  you can overwrite it by specifying the :from key in their options map):\n\n  - `send-transaction!`\n  - `call!`\n\n  Parameters:\n  web3 - web3 instance\n\n  Returns the default address HEX string.\n\n  Example:\n  user> `(default-account web3-instance)`\n  \"0x85d85715218895ae964a750d9a92f13a8951de3d\""],"^6","~$cljs-web3.eth/default-account","^N",false,"^C","resources/public/js/compiled/out/cljs_web3/eth.cljs","^G",22,"^O",["^I",[["^K"]]],"^P",null,"^Q",["^I",[null,null]],"^E",1,"^D",25,"^F",25,"^R",1,"^S",true,"^H",["^I",["^J",["^I",[["^K"]]]]],"^L","Gets the default address that is used for the following methods (optionally\n  you can overwrite it by specifying the :from key in their options map):\n\n  - `send-transaction!`\n  - `call!`\n\n  Parameters:\n  web3 - web3 instance\n\n  Returns the default address HEX string.\n\n  Example:\n  user> `(default-account web3-instance)`\n  \"0x85d85715218895ae964a750d9a92f13a8951de3d\""],"~$get-transaction",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/eth.cljs","^D",466,"^E",7,"^F",466,"^G",22,"^H",["^I",["^J",["^I",[["^K","~$&",["~$transaction-hash","^Z","^["]]]]]],"^L","Returns a transaction matching the given transaction hash.\n\n   Parameters:\n   web3             - web3 instance\n   transaction-hash - The transaction hash.\n   callback-fn      - callback with two parameters, error and result\n\n   Returns a transaction object its hash transaction-hash:\n\n   - hash: String, 32 Bytes - hash of the transaction.\n   - nonce: Number - the number of transactions made by the sender prior to this\n     one.\n   - block-hash: String, 32 Bytes - hash of the block where this transaction was\n                                    in. null when its pending.\n   - block-number: Number - block number where this transaction was in. null when\n                            its pending.\n   - transaction-index: Number - integer of the transactions index position in the\n                                 block. null when its pending.\n   - from: String, 20 Bytes - address of the sender.\n   - to: String, 20 Bytes - address of the receiver. null when its a contract\n                            creation transaction.\n   - value: BigNumber - value transferred in Wei.\n   - gas-price: BigNumber - gas price provided by the sender in Wei.\n   - gas: Number - gas provided by the sender.\n   - input: String - the data sent along with the transaction.\n\n   Example:\n   user> `(get-transaction\n            web3-instance\n            \"0x...\"\n            (fn [err res] (when-not err (println res))))`\n   nil\n   user> {:r 0x...\n          :v 0x2a\n          :hash 0xf...\n          :transaction-index 3 ...\n          (...)\n          :to 0x...}","^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^K",["^15","^Z","^["]]]],"^H",["^I",[["^K","~$&",["^15","^Z","^["]]]],"^Q",["^I",[null]]]],"^6","~$cljs-web3.eth/get-transaction","^N",true,"^C","resources/public/js/compiled/out/cljs_web3/eth.cljs","^G",22,"^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^K",["^15","^Z","^["]]]],"^H",["^I",[["^K","~$&",["^15","^Z","^["]]]],"^Q",["^I",[null]]],"^O",[["^I",["^K",["^15","^Z","^["]]]],"^P",null,"^Q",["^I",[null]],"^E",1,"^D",466,"^F",466,"^R",1,"^S",true,"^H",["^I",[["^K","~$&",["^15","^Z","^["]]]],"^L","Returns a transaction matching the given transaction hash.\n\n   Parameters:\n   web3             - web3 instance\n   transaction-hash - The transaction hash.\n   callback-fn      - callback with two parameters, error and result\n\n   Returns a transaction object its hash transaction-hash:\n\n   - hash: String, 32 Bytes - hash of the transaction.\n   - nonce: Number - the number of transactions made by the sender prior to this\n     one.\n   - block-hash: String, 32 Bytes - hash of the block where this transaction was\n                                    in. null when its pending.\n   - block-number: Number - block number where this transaction was in. null when\n                            its pending.\n   - transaction-index: Number - integer of the transactions index position in the\n                                 block. null when its pending.\n   - from: String, 20 Bytes - address of the sender.\n   - to: String, 20 Bytes - address of the receiver. null when its a contract\n                            creation transaction.\n   - value: BigNumber - value transferred in Wei.\n   - gas-price: BigNumber - gas price provided by the sender in Wei.\n   - gas: Number - gas provided by the sender.\n   - input: String - the data sent along with the transaction.\n\n   Example:\n   user> `(get-transaction\n            web3-instance\n            \"0x...\"\n            (fn [err res] (when-not err (println res))))`\n   nil\n   user> {:r 0x...\n          :v 0x2a\n          :hash 0xf...\n          :transaction-index 3 ...\n          (...)\n          :to 0x...}"],"~$accounts",["^ ","^6","~$cljs-web3.eth/accounts","^C","resources/public/js/compiled/out/cljs_web3/eth.cljs","^D",236,"^E",1,"^F",236,"^G",14,"^B",["^ ","^C","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/eth.cljs","^D",236,"^E",6,"^F",236,"^G",14],"^L","This property is read only and returns a list of accounts the node controls.\n\n  Parameters:\n  web3        - web3 instance\n  callback-fn - callback with two parameters, error and result\n\n  Returns an array of addresses controlled by client.\n\n  Example:\n  user> `(accounts web3-instance (fn [err res] (when-not err (println res))))`\n  nil\n  user> `[0x85d85715218895ae964a750d9a92f13a8951de3d]`","~:tag","~$any"],"~$compile-serpent",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/eth.cljs","^D",867,"^E",7,"^F",867,"^G",22,"^H",["^I",["^J",["^I",[["^K","~$&",["~$source-string","^Z","^["]]]]]],"^L","Compiling features being deprecated https://github.com/ethereum/EIPs/issues/209","^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^K",["^1<","^Z","^["]]]],"^H",["^I",[["^K","~$&",["^1<","^Z","^["]]]],"^Q",["^I",[null]]]],"^6","~$cljs-web3.eth/compile-serpent","^N",true,"^C","resources/public/js/compiled/out/cljs_web3/eth.cljs","^G",22,"^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^K",["^1<","^Z","^["]]]],"^H",["^I",[["^K","~$&",["^1<","^Z","^["]]]],"^Q",["^I",[null]]],"^O",[["^I",["^K",["^1<","^Z","^["]]]],"^P",null,"^Q",["^I",[null]],"^E",1,"^D",867,"^F",867,"^R",1,"^S",true,"^H",["^I",[["^K","~$&",["^1<","^Z","^["]]]],"^L","Compiling features being deprecated https://github.com/ethereum/EIPs/issues/209"],"~$compile-lll",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/eth.cljs","^D",861,"^E",7,"^F",861,"^G",18,"^H",["^I",["^J",["^I",[["^K","~$&",["^1<","^Z","^["]]]]]],"^L","Compiling features being deprecated https://github.com/ethereum/EIPs/issues/209","^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^K",["^1<","^Z","^["]]]],"^H",["^I",[["^K","~$&",["^1<","^Z","^["]]]],"^Q",["^I",[null]]]],"^6","~$cljs-web3.eth/compile-lll","^N",true,"^C","resources/public/js/compiled/out/cljs_web3/eth.cljs","^G",18,"^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^K",["^1<","^Z","^["]]]],"^H",["^I",[["^K","~$&",["^1<","^Z","^["]]]],"^Q",["^I",[null]]],"^O",[["^I",["^K",["^1<","^Z","^["]]]],"^P",null,"^Q",["^I",[null]],"^E",1,"^D",861,"^F",861,"^R",1,"^S",true,"^H",["^I",[["^K","~$&",["^1<","^Z","^["]]]],"^L","Compiling features being deprecated https://github.com/ethereum/EIPs/issues/209"],"~$get-transaction-count",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/eth.cljs","^D",575,"^E",7,"^F",575,"^G",28,"^H",["^I",["^J",["^I",[["^K","~$&",["~$address","~$default-block","^Z","^["]]]]]],"^L","Get the numbers of transactions sent from this address.\n\n  Parameters:\n  web3          - web3 instance\n  address       - The address to get the numbers of transactions from.\n  default-block - If you pass this parameter it will not use the default block\n                  set with set-default-block.\n  callback-fn   - callback with two parameters, error and result\n\n  Returns the number of transactions sent from the given address.\n\n  Example:\n  user> `(get-transaction-count web3-instance \"0x8\"\n           (fn [err res] (when-not err (println res))))`\n  nil\n  user> 16","^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^K",["^1A","^1B","^Z","^["]]]],"^H",["^I",[["^K","~$&",["^1A","^1B","^Z","^["]]]],"^Q",["^I",[null]]]],"^6","~$cljs-web3.eth/get-transaction-count","^N",true,"^C","resources/public/js/compiled/out/cljs_web3/eth.cljs","^G",28,"^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^K",["^1A","^1B","^Z","^["]]]],"^H",["^I",[["^K","~$&",["^1A","^1B","^Z","^["]]]],"^Q",["^I",[null]]],"^O",[["^I",["^K",["^1A","^1B","^Z","^["]]]],"^P",null,"^Q",["^I",[null]],"^E",1,"^D",575,"^F",575,"^R",1,"^S",true,"^H",["^I",[["^K","~$&",["^1A","^1B","^Z","^["]]]],"^L","Get the numbers of transactions sent from this address.\n\n  Parameters:\n  web3          - web3 instance\n  address       - The address to get the numbers of transactions from.\n  default-block - If you pass this parameter it will not use the default block\n                  set with set-default-block.\n  callback-fn   - callback with two parameters, error and result\n\n  Returns the number of transactions sent from the given address.\n\n  Example:\n  user> `(get-transaction-count web3-instance \"0x8\"\n           (fn [err res] (when-not err (println res))))`\n  nil\n  user> 16"],"~$get-block",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/eth.cljs","^D",367,"^E",7,"^F",367,"^G",16,"^H",["^I",["^J",["^I",[["^K","~$&",["^X","~$return-transaction-objects?","^Z","^["]]]]]],"^L","Returns a block matching the block number or block hash.\n\n  Parameters:\n  web3                        - web3 instance\n\n  block-hash-or-number        - The block number or hash. Or the string\n                                \"earliest\", \"latest\" or \"pending\"\n                                as in the default block parameter.\n\n  return-transaction-objects? - If true, the returned block will contain all\n                                transactions as objects, if false it will\n                                only contains the transaction hashes.\n  callback-fn                 - callback with two parameters, error and result\n\n  Returns the block object:\n\n  - number: Number - the block number. null when its pending block.\n  - hash: String, 32 Bytes - hash of the block. null when its pending block.\n  - parent-hash: String, 32 Bytes - hash of the parent block.\n  - nonce: String, 8 Bytes - hash of the generated proof-of-work. null when its\n                             pending block.\n  - sha3-uncles: String, 32 Bytes - SHA3 of the uncles data in the block.\n  - logs-bloom: String, 256 Bytes - the bloom filter for the logs of the block.\n                                   null when its pending block.\n  - transactions-root: String, 32 Bytes - the root of the transaction trie of the\n                                          block\n  - state-root: String, 32 Bytes - the root of the final state trie of the block.\n  - miner: String, 20 Bytes - the address of the beneficiary to whom the mining\n                              rewards were given.\n  - difficulty: BigNumber - integer of the difficulty for this block.\n  - total-difficulty: BigNumber - integer of the total difficulty of the chain\n                                  until this block.\n  - extra- data: String - the \"extra data\" field of this block.\n  - size: Number - integer the size of this block in bytes.\n  - gas- limit: Number - the maximum gas allowed in this block.\n  - gas-used: Number - the total used gas by all transactions in this block.\n  - timestamp: Number - the unix timestamp for when the block was collated.\n  - transactions: Array - Array of transaction objects, or 32 Bytes transaction\n                          hashes depending on the last given parameter.\n  - uncles: Array - Array of uncle hashes.\n\n  Example:\n  user> `(get-block web3-instance\n                    0\n                    false\n                    (fn [err res] (when-not err (println res))))`\n  nil\n  user> {:state-root 0x.., :hash 0x.., :number 0, :difficulty #object[e 1048576],\n         ...}","^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^K",["^X","^1E","^Z","^["]]]],"^H",["^I",[["^K","~$&",["^X","^1E","^Z","^["]]]],"^Q",["^I",[null]]]],"^6","~$cljs-web3.eth/get-block","^N",true,"^C","resources/public/js/compiled/out/cljs_web3/eth.cljs","^G",16,"^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^K",["^X","^1E","^Z","^["]]]],"^H",["^I",[["^K","~$&",["^X","^1E","^Z","^["]]]],"^Q",["^I",[null]]],"^O",[["^I",["^K",["^X","^1E","^Z","^["]]]],"^P",null,"^Q",["^I",[null]],"^E",1,"^D",367,"^F",367,"^R",1,"^S",true,"^H",["^I",[["^K","~$&",["^X","^1E","^Z","^["]]]],"^L","Returns a block matching the block number or block hash.\n\n  Parameters:\n  web3                        - web3 instance\n\n  block-hash-or-number        - The block number or hash. Or the string\n                                \"earliest\", \"latest\" or \"pending\"\n                                as in the default block parameter.\n\n  return-transaction-objects? - If true, the returned block will contain all\n                                transactions as objects, if false it will\n                                only contains the transaction hashes.\n  callback-fn                 - callback with two parameters, error and result\n\n  Returns the block object:\n\n  - number: Number - the block number. null when its pending block.\n  - hash: String, 32 Bytes - hash of the block. null when its pending block.\n  - parent-hash: String, 32 Bytes - hash of the parent block.\n  - nonce: String, 8 Bytes - hash of the generated proof-of-work. null when its\n                             pending block.\n  - sha3-uncles: String, 32 Bytes - SHA3 of the uncles data in the block.\n  - logs-bloom: String, 256 Bytes - the bloom filter for the logs of the block.\n                                   null when its pending block.\n  - transactions-root: String, 32 Bytes - the root of the transaction trie of the\n                                          block\n  - state-root: String, 32 Bytes - the root of the final state trie of the block.\n  - miner: String, 20 Bytes - the address of the beneficiary to whom the mining\n                              rewards were given.\n  - difficulty: BigNumber - integer of the difficulty for this block.\n  - total-difficulty: BigNumber - integer of the total difficulty of the chain\n                                  until this block.\n  - extra- data: String - the \"extra data\" field of this block.\n  - size: Number - integer the size of this block in bytes.\n  - gas- limit: Number - the maximum gas allowed in this block.\n  - gas-used: Number - the total used gas by all transactions in this block.\n  - timestamp: Number - the unix timestamp for when the block was collated.\n  - transactions: Array - Array of transaction objects, or 32 Bytes transaction\n                          hashes depending on the last given parameter.\n  - uncles: Array - Array of uncle hashes.\n\n  Example:\n  user> `(get-block web3-instance\n                    0\n                    false\n                    (fn [err res] (when-not err (println res))))`\n  nil\n  user> {:state-root 0x.., :hash 0x.., :number 0, :difficulty #object[e 1048576],\n         ...}"],"~$contract-call",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/eth.cljs","^D",952,"^E",7,"^F",952,"^G",20,"^H",["^I",["^J",["^I",[["~$contract-instance","~$method","~$&","^["]]]]],"^L","Explicitly call a method on a contract.\n\n  Use the kebab-cases version of the original method.\n  E.g., function fooBar() can be addressed with :foo-bar.\n\n  Parameters:\n  contract-instance - an instance of the contract (obtained via `contract` or\n                      `contract-at`)\n  method            - the kebab-cased version of the method\n  args              - arguments to the method\n\n  Example:\n  user> `(web3-eth/contract-call ContractInstance :multiply 5)`\n  25","^10",["^ ","^N",true,"^R",2,"^O",[["^I",["^1H","^1I","^["]]],"^H",["^I",[["^1H","^1I","~$&","^["]]],"^Q",["^I",[null]]]],"^6","~$cljs-web3.eth/contract-call","^N",true,"^C","resources/public/js/compiled/out/cljs_web3/eth.cljs","^G",20,"^10",["^ ","^N",true,"^R",2,"^O",[["^I",["^1H","^1I","^["]]],"^H",["^I",[["^1H","^1I","~$&","^["]]],"^Q",["^I",[null]]],"^O",[["^I",["^1H","^1I","^["]]],"^P",null,"^Q",["^I",[null]],"^E",1,"^D",952,"^F",952,"^R",2,"^S",true,"^H",["^I",[["^1H","^1I","~$&","^["]]],"^L","Explicitly call a method on a contract.\n\n  Use the kebab-cases version of the original method.\n  E.g., function fooBar() can be addressed with :foo-bar.\n\n  Parameters:\n  contract-instance - an instance of the contract (obtained via `contract` or\n                      `contract-at`)\n  method            - the kebab-cased version of the method\n  args              - arguments to the method\n\n  Example:\n  user> `(web3-eth/contract-call ContractInstance :multiply 5)`\n  25"],"~$stop-watching!",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/eth.cljs","^D",980,"^E",7,"^F",980,"^G",21,"^H",["^I",["^J",["^I",[["^5","~$&","^["]]]]],"^L","Stops and uninstalls the filter.\n\n  Arguments:\n  filter - the filter to stop","^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^5","^["]]],"^H",["^I",[["^5","~$&","^["]]],"^Q",["^I",[null]]]],"^6","~$cljs-web3.eth/stop-watching!","^N",true,"^C","resources/public/js/compiled/out/cljs_web3/eth.cljs","^G",21,"^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^5","^["]]],"^H",["^I",[["^5","~$&","^["]]],"^Q",["^I",[null]]],"^O",[["^I",["^5","^["]]],"^P",null,"^Q",["^I",[null]],"^E",1,"^D",980,"^F",980,"^R",1,"^S",true,"^H",["^I",[["^5","~$&","^["]]],"^L","Stops and uninstalls the filter.\n\n  Arguments:\n  filter - the filter to stop"],"~$syncing",["^ ","^6","~$cljs-web3.eth/syncing","^C","resources/public/js/compiled/out/cljs_web3/eth.cljs","^D",122,"^E",1,"^F",122,"^G",13,"^B",["^ ","^C","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/eth.cljs","^D",122,"^E",6,"^F",122,"^G",13],"^L","This property is read only and returns the either a sync object, when the\n  node is syncing or false.\n\n  Parameters:\n  web3        - web3 instance\n  callback-fn - callback with two parameters, error and result\n\n  Returns a sync object as follows, when the node is currently syncing or false:\n  - startingBlock: The block number where the sync started.\n  - currentBlock:  The block number where at which block the node currently\n                   synced to already.\n  - highestBlock:  The estimated block number to sync to.\n\n  Example:\n  user> `(syncing web3-instance (fn [err res] (when-not err (println res))))`\n  nil\n  user> `false`","^19","^1:"],"~$get-storage-at",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/eth.cljs","^D",317,"^E",7,"^F",317,"^G",21,"^H",["^I",["^J",["^I",[["^K","~$&",["^1A","~$position","^1B","^Z","^["]]]]]],"^L","Get the storage at a specific position of an address.\n\n  Parameters:\n  web3          - web3 instance\n  address       - The address to get the storage from.\n  position      - The index position of the storage.\n  default-block - If you pass this parameter it will not use the default block\n                  set with web3.eth.defaultBlock.\n  callback-fn   - callback with two parameters, error and result\n\n  Returns the value in storage at the given position.\n\n  Example:\n  user> `(get-storage-at web3-instance\n                         \"0x85d85715218895ae964a750d9a92f13a8951de3d\"\n                         0\n                         \"latest\"\n                         (fn [err res] (when-not err (println res))))`\n  nil\n  user> \"0x0000000000000000000000000000000000000000000000000000000000000000\" ","^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^K",["^1A","^1P","^1B","^Z","^["]]]],"^H",["^I",[["^K","~$&",["^1A","^1P","^1B","^Z","^["]]]],"^Q",["^I",[null]]]],"^6","~$cljs-web3.eth/get-storage-at","^N",true,"^C","resources/public/js/compiled/out/cljs_web3/eth.cljs","^G",21,"^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^K",["^1A","^1P","^1B","^Z","^["]]]],"^H",["^I",[["^K","~$&",["^1A","^1P","^1B","^Z","^["]]]],"^Q",["^I",[null]]],"^O",[["^I",["^K",["^1A","^1P","^1B","^Z","^["]]]],"^P",null,"^Q",["^I",[null]],"^E",1,"^D",317,"^F",317,"^R",1,"^S",true,"^H",["^I",[["^K","~$&",["^1A","^1P","^1B","^Z","^["]]]],"^L","Get the storage at a specific position of an address.\n\n  Parameters:\n  web3          - web3 instance\n  address       - The address to get the storage from.\n  position      - The index position of the storage.\n  default-block - If you pass this parameter it will not use the default block\n                  set with web3.eth.defaultBlock.\n  callback-fn   - callback with two parameters, error and result\n\n  Returns the value in storage at the given position.\n\n  Example:\n  user> `(get-storage-at web3-instance\n                         \"0x85d85715218895ae964a750d9a92f13a8951de3d\"\n                         0\n                         \"latest\"\n                         (fn [err res] (when-not err (println res))))`\n  nil\n  user> \"0x0000000000000000000000000000000000000000000000000000000000000000\" "],"~$sign",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/eth.cljs","^D",682,"^E",7,"^F",682,"^G",11,"^H",["^I",["^J",["^I",[["^K","~$&",["^1A","~$data-to-sign","^Z","^["]]]]]],"^L","Signs data from a specific account. This account needs to be unlocked.\n\n  Parameters:\n  web3          - web3 instance\n  address       - The address to sign with\n  data-to-sign  - Data to sign\n  callback-fn   - callback with two parameters, error and result\n\n  Returns the signed data.\n\n  After the hex prefix, characters correspond to ECDSA values like this:\n\n  r = signature[0:64]\n  s = signature[64:128]\n  v = signature[128:130]\n\n  Note that if you are using ecrecover, v will be either \"00\" or \"01\". As a\n  result, in order to use this value, you will have to parse it to an integer\n  and then add 27. This will result in either a 27 or a 28.\n\n  Example:\n  user> `(sign web3-instance\n               \"0x135a7de83802408321b74c322f8558db1679ac20\"\n               \"0x9dd2c369a187b4e6b9c402f030e50743e619301ea62aa4c0737d4ef7e10a3d49\"\n               (fn [err res] (when-not err (println res))))`\n\n  user> 0x3...","^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^K",["^1A","^1S","^Z","^["]]]],"^H",["^I",[["^K","~$&",["^1A","^1S","^Z","^["]]]],"^Q",["^I",[null]]]],"^6","~$cljs-web3.eth/sign","^N",true,"^C","resources/public/js/compiled/out/cljs_web3/eth.cljs","^G",11,"^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^K",["^1A","^1S","^Z","^["]]]],"^H",["^I",[["^K","~$&",["^1A","^1S","^Z","^["]]]],"^Q",["^I",[null]]],"^O",[["^I",["^K",["^1A","^1S","^Z","^["]]]],"^P",null,"^Q",["^I",[null]],"^E",1,"^D",682,"^F",682,"^R",1,"^S",true,"^H",["^I",[["^K","~$&",["^1A","^1S","^Z","^["]]]],"^L","Signs data from a specific account. This account needs to be unlocked.\n\n  Parameters:\n  web3          - web3 instance\n  address       - The address to sign with\n  data-to-sign  - Data to sign\n  callback-fn   - callback with two parameters, error and result\n\n  Returns the signed data.\n\n  After the hex prefix, characters correspond to ECDSA values like this:\n\n  r = signature[0:64]\n  s = signature[64:128]\n  v = signature[128:130]\n\n  Note that if you are using ecrecover, v will be either \"00\" or \"01\". As a\n  result, in order to use this value, you will have to parse it to an integer\n  and then add 27. This will result in either a 27 or a 28.\n\n  Example:\n  user> `(sign web3-instance\n               \"0x135a7de83802408321b74c322f8558db1679ac20\"\n               \"0x9dd2c369a187b4e6b9c402f030e50743e619301ea62aa4c0737d4ef7e10a3d49\"\n               (fn [err res] (when-not err (println res))))`\n\n  user> 0x3..."],"~$unregister",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/eth.cljs","^D",282,"^E",7,"^F",282,"^G",17,"^H",["^I",["^J",["^I",[["^K","^1A"]]]]],"^L","(Not Implemented yet) Unregisters a given address.\n\n  Parameters:\n  web3        - web3 instance\n  address     - string representing the address\n  callback-fn - callback with two parameters, error and result."],"^6","~$cljs-web3.eth/unregister","^N",false,"^C","resources/public/js/compiled/out/cljs_web3/eth.cljs","^G",17,"^O",["^I",[["^K","^1A"]]],"^P",null,"^Q",["^I",[null,null]],"^E",1,"^D",282,"^F",282,"^R",2,"^S",true,"^H",["^I",["^J",["^I",[["^K","^1A"]]]]],"^L","(Not Implemented yet) Unregisters a given address.\n\n  Parameters:\n  web3        - web3 instance\n  address     - string representing the address\n  callback-fn - callback with two parameters, error and result."],"~$sign-transaction",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/eth.cljs","^D",714,"^E",7,"^F",714,"^G",23,"^H",["^I",["^J",["^I",[["^K","~$&",["~$sign-tx-params","~$private-key","~$signed-tx","^Z","^["]]]]]],"^L","Sign a transaction. Method is not documented in the web3.js docs. Not sure if it is safe.\n\n  Parameters:\n  web3           - web3 instance\n  sign-tx-params - Parameters of transaction\n                   See `(send-transaction!)`\n  private-key    - Private key to sign the transaction with\n  callback-fn    - callback with two parameters, error and result\n\n  Returns signed transaction data.","^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^K",["^1X","^1Y","^1Z","^Z","^["]]]],"^H",["^I",[["^K","~$&",["^1X","^1Y","^1Z","^Z","^["]]]],"^Q",["^I",[null]]]],"^6","~$cljs-web3.eth/sign-transaction","^N",true,"^C","resources/public/js/compiled/out/cljs_web3/eth.cljs","^G",23,"^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^K",["^1X","^1Y","^1Z","^Z","^["]]]],"^H",["^I",[["^K","~$&",["^1X","^1Y","^1Z","^Z","^["]]]],"^Q",["^I",[null]]],"^O",[["^I",["^K",["^1X","^1Y","^1Z","^Z","^["]]]],"^P",null,"^Q",["^I",[null]],"^E",1,"^D",714,"^F",714,"^R",1,"^S",true,"^H",["^I",[["^K","~$&",["^1X","^1Y","^1Z","^Z","^["]]]],"^L","Sign a transaction. Method is not documented in the web3.js docs. Not sure if it is safe.\n\n  Parameters:\n  web3           - web3 instance\n  sign-tx-params - Parameters of transaction\n                   See `(send-transaction!)`\n  private-key    - Private key to sign the transaction with\n  callback-fn    - callback with two parameters, error and result\n\n  Returns signed transaction data."],"~$get-code",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/eth.cljs","^D",342,"^E",7,"^F",342,"^G",15,"^H",["^I",["^J",["^I",[["^K","~$&",["^1A","^1B","^Z","^["]]]]]],"^L","Get the code at a specific address.\n\n  Parameters:\n  web3          - web3 instance\n  address       - The address to get the code from.\n  default-block - If you pass this parameter it will not use the default block set\n                  with `get-default-block!`.\n  callback-fn   - callback with two parameters, error and result\n\n  Returns the data at given address HEX string.\n\n  Example:\n  user> (get-code web3-instance\n                  \"0x85d85715218895ae964a750d9a92f13a8951de3d\n                  0\n                  \"latest\"\n                  (fn [err res] (when-not err (println res))))\n  nil\n  user> `0x`\n  ","^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^K",["^1A","^1B","^Z","^["]]]],"^H",["^I",[["^K","~$&",["^1A","^1B","^Z","^["]]]],"^Q",["^I",[null]]]],"^6","~$cljs-web3.eth/get-code","^N",true,"^C","resources/public/js/compiled/out/cljs_web3/eth.cljs","^G",15,"^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^K",["^1A","^1B","^Z","^["]]]],"^H",["^I",[["^K","~$&",["^1A","^1B","^Z","^["]]]],"^Q",["^I",[null]]],"^O",[["^I",["^K",["^1A","^1B","^Z","^["]]]],"^P",null,"^Q",["^I",[null]],"^E",1,"^D",342,"^F",342,"^R",1,"^S",true,"^H",["^I",[["^K","~$&",["^1A","^1B","^Z","^["]]]],"^L","Get the code at a specific address.\n\n  Parameters:\n  web3          - web3 instance\n  address       - The address to get the code from.\n  default-block - If you pass this parameter it will not use the default block set\n                  with `get-default-block!`.\n  callback-fn   - callback with two parameters, error and result\n\n  Returns the data at given address HEX string.\n\n  Example:\n  user> (get-code web3-instance\n                  \"0x85d85715218895ae964a750d9a92f13a8951de3d\n                  0\n                  \"latest\"\n                  (fn [err res] (when-not err (println res))))\n  nil\n  user> `0x`\n  "],"~$get-block-transaction-count",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/eth.cljs","^D",421,"^E",7,"^F",421,"^G",34,"^H",["^I",["^J",["^I",[["^K","~$&",["^X","^Z","^["]]]]]],"^L","Returns the number of transaction in a given block.\n\n  Parameters\n  web3                 - web3 instance\n  block-hash-or-number - The block number or hash. Or the string \"earliest\",\n                         \"latest\" or \"pending\" as in the default block\n                         parameter.\n  callback-fn          - callback with two parameters, error and result\n\n  Example:\n  user> `(get-block-transaction-count\n           web3-instance\n           0\n           (fn [err res] (when-not err (println res))))`\n  nil\n  user> 0","^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^K",["^X","^Z","^["]]]],"^H",["^I",[["^K","~$&",["^X","^Z","^["]]]],"^Q",["^I",[null]]]],"^6","~$cljs-web3.eth/get-block-transaction-count","^N",true,"^C","resources/public/js/compiled/out/cljs_web3/eth.cljs","^G",34,"^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^K",["^X","^Z","^["]]]],"^H",["^I",[["^K","~$&",["^X","^Z","^["]]]],"^Q",["^I",[null]]],"^O",[["^I",["^K",["^X","^Z","^["]]]],"^P",null,"^Q",["^I",[null]],"^E",1,"^D",421,"^F",421,"^R",1,"^S",true,"^H",["^I",[["^K","~$&",["^X","^Z","^["]]]],"^L","Returns the number of transaction in a given block.\n\n  Parameters\n  web3                 - web3 instance\n  block-hash-or-number - The block number or hash. Or the string \"earliest\",\n                         \"latest\" or \"pending\" as in the default block\n                         parameter.\n  callback-fn          - callback with two parameters, error and result\n\n  Example:\n  user> `(get-block-transaction-count\n           web3-instance\n           0\n           (fn [err res] (when-not err (println res))))`\n  nil\n  user> 0"],"~$coinbase",["^ ","^6","~$cljs-web3.eth/coinbase","^C","resources/public/js/compiled/out/cljs_web3/eth.cljs","^D",173,"^E",1,"^F",173,"^G",14,"^B",["^ ","^C","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/eth.cljs","^D",173,"^E",6,"^F",173,"^G",14],"^L","This property is read only and returns the coinbase address where the mining\n  rewards go to.\n\n  Parameters:\n  web3 - web3 instance\n\n  Returns a string representing the coinbase address of the client.\n\n  Example:\n  user> `(coinbase web3-instance)`\n  \"0x85d85715218895ae964a750d9a92f13a8951de3d\"","^19","^1:"],"~$send-transaction!",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/eth.cljs","^D",596,"^E",7,"^F",596,"^G",24,"^H",["^I",["^J",["^I",[["^K","~$&",["~$transaction-object","^Z","^["]]]]]],"^L","Sends a transaction to the network.\n\n  Parameters:\n  web3               - web3 instance\n  transaction-object - The transaction object to send:\n\n    :from: String - The address for the sending account. Uses the\n                    `default-account` property, if not specified.\n\n    :to: String   - (optional) The destination address of the message, left\n                               undefined for a contract-creation\n                               transaction.\n\n    :value        - (optional) The value transferred for the transaction in\n                               Wei, also the endowment if it's a\n                               contract-creation transaction.\n\n    :gas:         - (optional, default: To-Be-Determined) The amount of gas\n                    to use for the transaction (unused gas is refunded).\n    :gas-price:   - (optional, default: To-Be-Determined) The price of gas\n                    for this transaction in wei, defaults to the mean network\n                    gas price.\n    :data:        - (optional) Either a byte string containing the associated\n                    data of the message, or in the case of a contract-creation\n                    transaction, the initialisation code.\n    :nonce:       - (optional) Integer of a nonce. This allows to overwrite your\n                               own pending transactions that use the same nonce.\n  callback-fn   - callback with two parameters, error and result, where result\n                  is the transaction hash\n\n  Returns the 32 Bytes transaction hash as HEX string.\n\n  If the transaction was a contract creation use `(get-transaction-receipt)` to\n  get the contract address, after the transaction was mined.\n\n  Example:\n  user> (send-transaction! web3-instance {:to \"0x..\"}\n          (fn [err res] (when-not err (println res))))\n  nil\n  user> 0x...","^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^K",["^27","^Z","^["]]]],"^H",["^I",[["^K","~$&",["^27","^Z","^["]]]],"^Q",["^I",[null]]]],"^6","~$cljs-web3.eth/send-transaction!","^N",true,"^C","resources/public/js/compiled/out/cljs_web3/eth.cljs","^G",24,"^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^K",["^27","^Z","^["]]]],"^H",["^I",[["^K","~$&",["^27","^Z","^["]]]],"^Q",["^I",[null]]],"^O",[["^I",["^K",["^27","^Z","^["]]]],"^P",null,"^Q",["^I",[null]],"^E",1,"^D",596,"^F",596,"^R",1,"^S",true,"^H",["^I",[["^K","~$&",["^27","^Z","^["]]]],"^L","Sends a transaction to the network.\n\n  Parameters:\n  web3               - web3 instance\n  transaction-object - The transaction object to send:\n\n    :from: String - The address for the sending account. Uses the\n                    `default-account` property, if not specified.\n\n    :to: String   - (optional) The destination address of the message, left\n                               undefined for a contract-creation\n                               transaction.\n\n    :value        - (optional) The value transferred for the transaction in\n                               Wei, also the endowment if it's a\n                               contract-creation transaction.\n\n    :gas:         - (optional, default: To-Be-Determined) The amount of gas\n                    to use for the transaction (unused gas is refunded).\n    :gas-price:   - (optional, default: To-Be-Determined) The price of gas\n                    for this transaction in wei, defaults to the mean network\n                    gas price.\n    :data:        - (optional) Either a byte string containing the associated\n                    data of the message, or in the case of a contract-creation\n                    transaction, the initialisation code.\n    :nonce:       - (optional) Integer of a nonce. This allows to overwrite your\n                               own pending transactions that use the same nonce.\n  callback-fn   - callback with two parameters, error and result, where result\n                  is the transaction hash\n\n  Returns the 32 Bytes transaction hash as HEX string.\n\n  If the transaction was a contract creation use `(get-transaction-receipt)` to\n  get the contract address, after the transaction was mined.\n\n  Example:\n  user> (send-transaction! web3-instance {:to \"0x..\"}\n          (fn [err res] (when-not err (println res))))\n  nil\n  user> 0x..."],"~$get-uncle",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/eth.cljs","^D",442,"^E",7,"^F",442,"^G",16,"^H",["^I",["^J",["^I",[["^K","~$&",["^X","~$uncle-number","^1E","^Z","^["]]]]]],"^L","Returns a blocks uncle by a given uncle index position.\n  Parameters\n\n  Parameters:\n  web3                        - web3 instance\n  block-hash-or-number        - The block number or hash. Or the string\n                                \"earliest\", \"latest\" or \"pending\" as in\n                                the default block parameter\n  uncle-number                - The index position of the uncle\n  return-transaction-objects? - If true, the returned block will contain all\n                                transactions as objects, if false it will only\n                                contains the transaction hashes\n  default-block               - If you pass this parameter it will not use the\n                                default block set with (set-default-block)\n  callback-fn                 - callback with two parameters, error and result\n\n  Returns the returned uncle. For a return value see `(get-block)`.\n\n  Note: An uncle doesn't contain individual transactions.","^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^K",["^X","^2:","^1E","^Z","^["]]]],"^H",["^I",[["^K","~$&",["^X","^2:","^1E","^Z","^["]]]],"^Q",["^I",[null]]]],"^6","~$cljs-web3.eth/get-uncle","^N",true,"^C","resources/public/js/compiled/out/cljs_web3/eth.cljs","^G",16,"^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^K",["^X","^2:","^1E","^Z","^["]]]],"^H",["^I",[["^K","~$&",["^X","^2:","^1E","^Z","^["]]]],"^Q",["^I",[null]]],"^O",[["^I",["^K",["^X","^2:","^1E","^Z","^["]]]],"^P",null,"^Q",["^I",[null]],"^E",1,"^D",442,"^F",442,"^R",1,"^S",true,"^H",["^I",[["^K","~$&",["^X","^2:","^1E","^Z","^["]]]],"^L","Returns a blocks uncle by a given uncle index position.\n  Parameters\n\n  Parameters:\n  web3                        - web3 instance\n  block-hash-or-number        - The block number or hash. Or the string\n                                \"earliest\", \"latest\" or \"pending\" as in\n                                the default block parameter\n  uncle-number                - The index position of the uncle\n  return-transaction-objects? - If true, the returned block will contain all\n                                transactions as objects, if false it will only\n                                contains the transaction hashes\n  default-block               - If you pass this parameter it will not use the\n                                default block set with (set-default-block)\n  callback-fn                 - callback with two parameters, error and result\n\n  Returns the returned uncle. For a return value see `(get-block)`.\n\n  Note: An uncle doesn't contain individual transactions."],"~$contract",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/eth.cljs","^D",882,"^E",7,"^F",882,"^G",15,"^H",["^I",["^J",["^I",[["^K","~$&",["~$abi","^Z","^["]]]]]],"^L","Creates a contract object for a solidity contract, which can be used to\n  initiate contracts on an address.\n\n  Parameters:\n  web3          - web3 instance\n  abi           - ABI array with descriptions of functions and events of\n                  the contract\n  callback-fn   - callback with two parameters, error and result\n\n  Returns a contract object.","^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^K",["^2=","^Z","^["]]]],"^H",["^I",[["^K","~$&",["^2=","^Z","^["]]]],"^Q",["^I",[null]]]],"^6","~$cljs-web3.eth/contract","^N",true,"^C","resources/public/js/compiled/out/cljs_web3/eth.cljs","^G",15,"^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^K",["^2=","^Z","^["]]]],"^H",["^I",[["^K","~$&",["^2=","^Z","^["]]]],"^Q",["^I",[null]]],"^O",[["^I",["^K",["^2=","^Z","^["]]]],"^P",null,"^Q",["^I",[null]],"^E",1,"^D",882,"^F",882,"^R",1,"^S",true,"^H",["^I",[["^K","~$&",["^2=","^Z","^["]]]],"^L","Creates a contract object for a solidity contract, which can be used to\n  initiate contracts on an address.\n\n  Parameters:\n  web3          - web3 instance\n  abi           - ABI array with descriptions of functions and events of\n                  the contract\n  callback-fn   - callback with two parameters, error and result\n\n  Returns a contract object."],"~$gas-price",["^ ","^6","~$cljs-web3.eth/gas-price","^C","resources/public/js/compiled/out/cljs_web3/eth.cljs","^D",219,"^E",1,"^F",219,"^G",15,"^B",["^ ","^C","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/eth.cljs","^D",219,"^E",6,"^F",219,"^G",15],"^L","This property is read only and returns the current gas price. The gas price\n  is determined by the x latest blocks median gas price.\n\n  Parameters:\n  web3        - web3 instance\n  callback-fn - callback with two parameters, error and result\n\n  Returns a BigNumber instance of the current gas price in wei.\n\n  Example:\n  user> `(gas-price web3-instance (fn [err res] (when-not err (println res))))`\n  nil\n  user> #object[e 90000000000]","^19","^1:"],"~$contract-at",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/eth.cljs","^D",897,"^E",7,"^F",897,"^G",18,"^H",["^I",["^J",["^I",[["^K","^2=","~$&",["^1A","^Z","^["]]]]]],"^L","Initiate an existing contract on an address.\n\n  Parameters:\n  web3          - web3 instance\n  abi           - ABI array with descriptions of functions and events of\n                  the contract\n  address       - The address of the existing contract\n\n  Example:\n  user> `(contract-at web3-instance\n                      abi\n                      address)`","^10",["^ ","^N",true,"^R",2,"^O",[["^I",["^K","^2=",["^1A","^Z","^["]]]],"^H",["^I",[["^K","^2=","~$&",["^1A","^Z","^["]]]],"^Q",["^I",[null]]]],"^6","~$cljs-web3.eth/contract-at","^N",true,"^C","resources/public/js/compiled/out/cljs_web3/eth.cljs","^G",18,"^10",["^ ","^N",true,"^R",2,"^O",[["^I",["^K","^2=",["^1A","^Z","^["]]]],"^H",["^I",[["^K","^2=","~$&",["^1A","^Z","^["]]]],"^Q",["^I",[null]]],"^O",[["^I",["^K","^2=",["^1A","^Z","^["]]]],"^P",null,"^Q",["^I",[null]],"^E",1,"^D",897,"^F",897,"^R",2,"^S",true,"^H",["^I",[["^K","^2=","~$&",["^1A","^Z","^["]]]],"^L","Initiate an existing contract on an address.\n\n  Parameters:\n  web3          - web3 instance\n  abi           - ABI array with descriptions of functions and events of\n                  the contract\n  address       - The address of the existing contract\n\n  Example:\n  user> `(contract-at web3-instance\n                      abi\n                      address)`"],"~$get-transaction-receipt",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/eth.cljs","^D",541,"^E",7,"^F",541,"^G",30,"^H",["^I",["^J",["^I",[["^K","~$&",["^15","^Z","^["]]]]]],"^L","Returns the receipt of a transaction by transaction hash.\n\n  Note That the receipt is not available for pending transactions.\n\n  Parameters:\n  web3              - web3 instance\n  transaction-hash  - The transaction hash.\n  callback-fn       - callback with two parameters, error and result\n\n  Returns transaction receipt object, or null when no receipt was found:\n\n  - blockHash: String, 32 Bytes - hash of the block where this transaction was\n                                  in.\n  - blockNumber: Number - block number where this transaction was in.\n  - transactionHash: String, 32 Bytes - hash of the transaction.\n  - transactionIndex: Number - integer of the transactions index position in the\n                               block.\n  - from: String, 20 Bytes - address of the sender.\n  - to: String, 20 Bytes - address of the receiver. null when its a contract\n                           creation transaction.\n  - cumulativeGasUsed: Number - The total amount of gas used when this\n                                transaction was executed in the block.\n  - gasUsed: Number - The amount of gas used by this specific transaction alone.\n  - contractAddress: String - 20 Bytes - The contract address created, if the\n                                         transaction was a contract creation,\n                                         otherwise null.\n  - logs: Array - Array of log objects, which this transaction generated.\n\n  Example","^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^K",["^15","^Z","^["]]]],"^H",["^I",[["^K","~$&",["^15","^Z","^["]]]],"^Q",["^I",[null]]]],"^6","~$cljs-web3.eth/get-transaction-receipt","^N",true,"^C","resources/public/js/compiled/out/cljs_web3/eth.cljs","^G",30,"^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^K",["^15","^Z","^["]]]],"^H",["^I",[["^K","~$&",["^15","^Z","^["]]]],"^Q",["^I",[null]]],"^O",[["^I",["^K",["^15","^Z","^["]]]],"^P",null,"^Q",["^I",[null]],"^E",1,"^D",541,"^F",541,"^R",1,"^S",true,"^H",["^I",[["^K","~$&",["^15","^Z","^["]]]],"^L","Returns the receipt of a transaction by transaction hash.\n\n  Note That the receipt is not available for pending transactions.\n\n  Parameters:\n  web3              - web3 instance\n  transaction-hash  - The transaction hash.\n  callback-fn       - callback with two parameters, error and result\n\n  Returns transaction receipt object, or null when no receipt was found:\n\n  - blockHash: String, 32 Bytes - hash of the block where this transaction was\n                                  in.\n  - blockNumber: Number - block number where this transaction was in.\n  - transactionHash: String, 32 Bytes - hash of the transaction.\n  - transactionIndex: Number - integer of the transactions index position in the\n                               block.\n  - from: String, 20 Bytes - address of the sender.\n  - to: String, 20 Bytes - address of the receiver. null when its a contract\n                           creation transaction.\n  - cumulativeGasUsed: Number - The total amount of gas used when this\n                                transaction was executed in the block.\n  - gasUsed: Number - The amount of gas used by this specific transaction alone.\n  - contractAddress: String - 20 Bytes - The contract address created, if the\n                                         transaction was a contract creation,\n                                         otherwise null.\n  - logs: Array - Array of log objects, which this transaction generated.\n\n  Example"],"~$get-compilers",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/eth.cljs","^D",849,"^E",7,"^F",849,"^G",20,"^H",["^I",["^J",["^I",[["^K","~$&","^["]]]]],"^L","Compiling features being deprecated https://github.com/ethereum/EIPs/issues/209","^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^K","^["]]],"^H",["^I",[["^K","~$&","^["]]],"^Q",["^I",[null]]]],"^6","~$cljs-web3.eth/get-compilers","^N",true,"^C","resources/public/js/compiled/out/cljs_web3/eth.cljs","^G",20,"^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^K","^["]]],"^H",["^I",[["^K","~$&","^["]]],"^Q",["^I",[null]]],"^O",[["^I",["^K","^["]]],"^P",null,"^Q",["^I",[null]],"^E",1,"^D",849,"^F",849,"^R",1,"^S",true,"^H",["^I",[["^K","~$&","^["]]],"^L","Compiling features being deprecated https://github.com/ethereum/EIPs/issues/209"],"~$set-default-account!",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/eth.cljs","^D",44,"^E",7,"^F",44,"^G",27,"^H",["^I",["^J",["^I",[["^K","~$hex-str"]]]]],"^L","Sets the default address that is used for the following methods (optionally\n  you can overwrite it by specifying the :from key in their options map):\n\n  - `send-transaction!`\n  - `call!`\n\n  Parameters:\n  web3    - web3 instance\n  hex-str - Any 20 bytes address you own, or where you have the private key for\n\n\n  Returns a 20 bytes HEX string representing the currently set address.\n\n  Example:\n  user> (set-default-account! web3-instance\n                              \"0x85d85715218895ae964a750d9a92f13a8951de3d\")\n  \"0x85d85715218895ae964a750d9a92f13a8951de3d\""],"^6","~$cljs-web3.eth/set-default-account!","^N",false,"^C","resources/public/js/compiled/out/cljs_web3/eth.cljs","^G",27,"^O",["^I",[["^K","^2H"]]],"^P",null,"^Q",["^I",[null,null]],"^E",1,"^D",44,"^F",44,"^R",2,"^S",true,"^H",["^I",["^J",["^I",[["^K","^2H"]]]]],"^L","Sets the default address that is used for the following methods (optionally\n  you can overwrite it by specifying the :from key in their options map):\n\n  - `send-transaction!`\n  - `call!`\n\n  Parameters:\n  web3    - web3 instance\n  hex-str - Any 20 bytes address you own, or where you have the private key for\n\n\n  Returns a 20 bytes HEX string representing the currently set address.\n\n  Example:\n  user> (set-default-account! web3-instance\n                              \"0x85d85715218895ae964a750d9a92f13a8951de3d\")\n  \"0x85d85715218895ae964a750d9a92f13a8951de3d\""],"~$contract-new",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/eth.cljs","^D",914,"^E",7,"^F",914,"^G",19,"^H",["^I",["^J",["^I",[["^K","^2=","~$&",["~$transaction-data","~$callback-fn","^Z","^["]]]]]],"^L","Deploy a contract asynchronous from a Solidity file.\n\n  Parameters:\n  web3             - web3 instance\n  abi              - ABI array with descriptions of functions and events of\n                     the contract\n  transaction-data - map that contains\n    - :gas - max gas to use\n    - :data the BIN of the contract\n    - :from account to use\n  callback-fn      - callback with two parameters, error and contract.\n                     From the contract the \"address\" property can be used to\n                     obtain the address. And the \"transactionHash\" to obtain\n                     the hash of the transaction, which created the contract.\n\n  Example:\n  `(contract-new web3-instance\n                 abi\n                 {:from \"0x..\"\n                  :data bin\n                  :gas  4000000}\n                 (fn [err contract]\n                   (if-not err\n                    (let [address (aget contract \"address\")\n                          tx-hash (aget contract \"transactionHash\")]\n                      ;; Two calls: transaction received\n                      ;; and contract deployed.\n                      ;; Check address on the second call\n                      (when (address? address)\n                        (do-something-with-contract contract)\n                        (do-something-with-address address)))\n                    (println \"error deploying contract\" err))))`\n   nil","^10",["^ ","^N",true,"^R",2,"^O",[["^I",["^K","^2=",["^2K","^2L","^Z","^["]]]],"^H",["^I",[["^K","^2=","~$&",["^2K","^2L","^Z","^["]]]],"^Q",["^I",[null]]]],"^6","~$cljs-web3.eth/contract-new","^N",true,"^C","resources/public/js/compiled/out/cljs_web3/eth.cljs","^G",19,"^10",["^ ","^N",true,"^R",2,"^O",[["^I",["^K","^2=",["^2K","^2L","^Z","^["]]]],"^H",["^I",[["^K","^2=","~$&",["^2K","^2L","^Z","^["]]]],"^Q",["^I",[null]]],"^O",[["^I",["^K","^2=",["^2K","^2L","^Z","^["]]]],"^P",null,"^Q",["^I",[null]],"^E",1,"^D",914,"^F",914,"^R",2,"^S",true,"^H",["^I",[["^K","^2=","~$&",["^2K","^2L","^Z","^["]]]],"^L","Deploy a contract asynchronous from a Solidity file.\n\n  Parameters:\n  web3             - web3 instance\n  abi              - ABI array with descriptions of functions and events of\n                     the contract\n  transaction-data - map that contains\n    - :gas - max gas to use\n    - :data the BIN of the contract\n    - :from account to use\n  callback-fn      - callback with two parameters, error and contract.\n                     From the contract the \"address\" property can be used to\n                     obtain the address. And the \"transactionHash\" to obtain\n                     the hash of the transaction, which created the contract.\n\n  Example:\n  `(contract-new web3-instance\n                 abi\n                 {:from \"0x..\"\n                  :data bin\n                  :gas  4000000}\n                 (fn [err contract]\n                   (if-not err\n                    (let [address (aget contract \"address\")\n                          tx-hash (aget contract \"transactionHash\")]\n                      ;; Two calls: transaction received\n                      ;; and contract deployed.\n                      ;; Check address on the second call\n                      (when (address? address)\n                        (do-something-with-contract contract)\n                        (do-something-with-address address)))\n                    (println \"error deploying contract\" err))))`\n   nil"],"~$get-balance",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/eth.cljs","^D",293,"^E",7,"^F",293,"^G",18,"^H",["^I",["^J",["^I",[["^K","~$&",["^1A","^1B","^Z","^["]]]]]],"^L","Get the balance of an address at a given block.\n\n  Parameters:\n  web3          - web3 instance\n  address       - The address to get the balance of.\n  default-block - If you pass this parameter it will not use the default block\n                  set with set-default-block.\n  callback-fn   - callback with two parameters, error and result\n\n  Returns a BigNumber instance of the current balance for the given address in\n  wei.\n\n  Example:\n  user> `(get-balance web3-instance\n                      \"0x85d85715218895ae964a750d9a92f13a8951de3d\"\n                      \"latest\"\n                      (fn [err res] (when-not err (println res))))`\n  nil\n  user> #object[e 1729597111000000000]","^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^K",["^1A","^1B","^Z","^["]]]],"^H",["^I",[["^K","~$&",["^1A","^1B","^Z","^["]]]],"^Q",["^I",[null]]]],"^6","~$cljs-web3.eth/get-balance","^N",true,"^C","resources/public/js/compiled/out/cljs_web3/eth.cljs","^G",18,"^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^K",["^1A","^1B","^Z","^["]]]],"^H",["^I",[["^K","~$&",["^1A","^1B","^Z","^["]]]],"^Q",["^I",[null]]],"^O",[["^I",["^K",["^1A","^1B","^Z","^["]]]],"^P",null,"^Q",["^I",[null]],"^E",1,"^D",293,"^F",293,"^R",1,"^S",true,"^H",["^I",[["^K","~$&",["^1A","^1B","^Z","^["]]]],"^L","Get the balance of an address at a given block.\n\n  Parameters:\n  web3          - web3 instance\n  address       - The address to get the balance of.\n  default-block - If you pass this parameter it will not use the default block\n                  set with set-default-block.\n  callback-fn   - callback with two parameters, error and result\n\n  Returns a BigNumber instance of the current balance for the given address in\n  wei.\n\n  Example:\n  user> `(get-balance web3-instance\n                      \"0x85d85715218895ae964a750d9a92f13a8951de3d\"\n                      \"latest\"\n                      (fn [err res] (when-not err (println res))))`\n  nil\n  user> #object[e 1729597111000000000]"],"^1B",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/eth.cljs","^D",66,"^E",7,"^F",66,"^G",20,"^H",["^I",["^J",["^I",[["^K"]]]]],"^L","This default block is used for the following methods (optionally you can\n  override it by passing the default-block parameter):\n\n  - `get-balance`\n  - `get-code`\n  - `get-transactionCount`\n  - `get-storageAt`\n  - `call`\n  - `contract-call`\n  - `estimate-gas`\n\n  Parameters:\n  web3 - web3 instance\n\n  Returns one of:\n  - a block number\n  - \"earliest\", the genisis block\n  - \"latest\", the latest block (current head of the blockchain)\n  - \"pending\", the currently mined block (including pending transactions)\n\n  Example:\n  user> `(default-block web3-instance)`\n  \"latest\""],"^6","~$cljs-web3.eth/default-block","^N",false,"^C","resources/public/js/compiled/out/cljs_web3/eth.cljs","^G",20,"^O",["^I",[["^K"]]],"^P",null,"^Q",["^I",[null,null]],"^E",1,"^D",66,"^F",66,"^R",1,"^S",true,"^H",["^I",["^J",["^I",[["^K"]]]]],"^L","This default block is used for the following methods (optionally you can\n  override it by passing the default-block parameter):\n\n  - `get-balance`\n  - `get-code`\n  - `get-transactionCount`\n  - `get-storageAt`\n  - `call`\n  - `contract-call`\n  - `estimate-gas`\n\n  Parameters:\n  web3 - web3 instance\n\n  Returns one of:\n  - a block number\n  - \"earliest\", the genisis block\n  - \"latest\", the latest block (current head of the blockchain)\n  - \"pending\", the currently mined block (including pending transactions)\n\n  Example:\n  user> `(default-block web3-instance)`\n  \"latest\""],"~$block-number",["^ ","^6","~$cljs-web3.eth/block-number","^C","resources/public/js/compiled/out/cljs_web3/eth.cljs","^D",252,"^E",1,"^F",252,"^G",18,"^B",["^ ","^C","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/eth.cljs","^D",252,"^E",6,"^F",252,"^G",18],"^L","This property is read only and returns the current block number.\n\n  Parameters:\n  web3        - web3 instance\n  callback-fn - callback with two parameters, error and result\n\n  Returns the number of the most recent block.\n\n  Example:\n  `(block-number web3-instance\n                 (fn [err res] (when-not err (println res))))`\n  nil\n  user> `1783426`","^19","^1:"],"~$send-raw-transaction!",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/eth.cljs","^D",641,"^E",7,"^F",641,"^G",28,"^H",["^I",["^J",["^I",[["^K","~$&",["~$signed-transaction-data","^Z","^["]]]]]],"^L","Sends an already signed transaction. For example can be signed using:\n  https://github.com/SilentCicero/ethereumjs-accounts\n\n  Parameters:\n  web3                    - web3 instance\n  signed-transaction-data - Signed transaction data in HEX format\n\n  callback-fn             - callback with two parameters, error and result\n\n  Returns the 32 Bytes transaction hash as HEX string.\n\n  If the transaction was a contract creation use `(get-transaction-receipt)`\n  to get the contract address, after the transaction was mined.\n\n  See https://github.com/ethereum/wiki/wiki/JavaScript-API#example-46 for a\n  JavaScript example.","^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^K",["^2T","^Z","^["]]]],"^H",["^I",[["^K","~$&",["^2T","^Z","^["]]]],"^Q",["^I",[null]]]],"^6","~$cljs-web3.eth/send-raw-transaction!","^N",true,"^C","resources/public/js/compiled/out/cljs_web3/eth.cljs","^G",28,"^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^K",["^2T","^Z","^["]]]],"^H",["^I",[["^K","~$&",["^2T","^Z","^["]]]],"^Q",["^I",[null]]],"^O",[["^I",["^K",["^2T","^Z","^["]]]],"^P",null,"^Q",["^I",[null]],"^E",1,"^D",641,"^F",641,"^R",1,"^S",true,"^H",["^I",[["^K","~$&",["^2T","^Z","^["]]]],"^L","Sends an already signed transaction. For example can be signed using:\n  https://github.com/SilentCicero/ethereumjs-accounts\n\n  Parameters:\n  web3                    - web3 instance\n  signed-transaction-data - Signed transaction data in HEX format\n\n  callback-fn             - callback with two parameters, error and result\n\n  Returns the 32 Bytes transaction hash as HEX string.\n\n  If the transaction was a contract creation use `(get-transaction-receipt)`\n  to get the contract address, after the transaction was mined.\n\n  See https://github.com/ethereum/wiki/wiki/JavaScript-API#example-46 for a\n  JavaScript example."],"~$mining?",["^ ","^6","~$cljs-web3.eth/mining?","^C","resources/public/js/compiled/out/cljs_web3/eth.cljs","^D",188,"^E",1,"^F",188,"^G",13,"^B",["^ ","^C","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/eth.cljs","^D",188,"^E",6,"^F",188,"^G",13],"^L","This property is read only and says whether the node is mining or not.\n\n  Parameters:\n  web3 - web3 instance\n\n  Returns a boolean: true if the client is mining, otherwise false.\n\n  Example:\n  `(mining? web3-instance (fn [err res] (when-not err (println res))))`\n  nil\n  user> `false`","^19","^1:"],"~$compile-solidity",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/eth.cljs","^D",855,"^E",7,"^F",855,"^G",23,"^H",["^I",["^J",["^I",[["^K","~$&",["^1<","^Z","^["]]]]]],"^L","Compiling features being deprecated https://github.com/ethereum/EIPs/issues/209","^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^K",["^1<","^Z","^["]]]],"^H",["^I",[["^K","~$&",["^1<","^Z","^["]]]],"^Q",["^I",[null]]]],"^6","~$cljs-web3.eth/compile-solidity","^N",true,"^C","resources/public/js/compiled/out/cljs_web3/eth.cljs","^G",23,"^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^K",["^1<","^Z","^["]]]],"^H",["^I",[["^K","~$&",["^1<","^Z","^["]]]],"^Q",["^I",[null]]],"^O",[["^I",["^K",["^1<","^Z","^["]]]],"^P",null,"^Q",["^I",[null]],"^E",1,"^D",855,"^F",855,"^R",1,"^S",true,"^H",["^I",[["^K","~$&",["^1<","^Z","^["]]]],"^L","Compiling features being deprecated https://github.com/ethereum/EIPs/issues/209"],"~$hashrate",["^ ","^6","~$cljs-web3.eth/hashrate","^C","resources/public/js/compiled/out/cljs_web3/eth.cljs","^D",203,"^E",1,"^F",203,"^G",14,"^B",["^ ","^C","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/eth.cljs","^D",203,"^E",6,"^F",203,"^G",14],"^L","This property is read only and returns the number of hashes per second that\n  the node is mining with.\n\n  Parameters:\n  web3 - web3 instance\n\n  Returns a number representing the hashes per second.\n\n  user> `(hashrate web3-instance (fn [err res] (when-not err (println res))))`\n  nil\n  user> 0\n  ","^19","^1:"],"~$estimate-gas",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/eth.cljs","^D",755,"^E",7,"^F",755,"^G",19,"^H",["^I",["^J",["^I",[["^K","~$&",["~$call-object","^Z","^["]]]]]],"^L","Executes a message call or transaction, which is directly executed in the VM\n  of the node, but never mined into the blockchain and returns the amount of the\n  gas used.\n\n  Parameters:\n  web3          - web3 instance\n  call-object   - See `(send-transaction!)`, except that all properties are\n                  optional.\n  callback-fn   - callback with two parameters, error and result\n\n  Returns the used gas for the simulated call/transaction.\n\n  Example:\n  user> `(estimate-gas web3-instance\n           {:to   \"0x135a7de83802408321b74c322f8558db1679ac20\",\n            :data \"0x135a7de83802408321b74c322f8558db1679ac20\"}\n           (fn [err res] (when-not err (println res))))`\n  nil\n  user> 22361","^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^K",["^31","^Z","^["]]]],"^H",["^I",[["^K","~$&",["^31","^Z","^["]]]],"^Q",["^I",[null]]]],"^6","~$cljs-web3.eth/estimate-gas","^N",true,"^C","resources/public/js/compiled/out/cljs_web3/eth.cljs","^G",19,"^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^K",["^31","^Z","^["]]]],"^H",["^I",[["^K","~$&",["^31","^Z","^["]]]],"^Q",["^I",[null]]],"^O",[["^I",["^K",["^31","^Z","^["]]]],"^P",null,"^Q",["^I",[null]],"^E",1,"^D",755,"^F",755,"^R",1,"^S",true,"^H",["^I",[["^K","~$&",["^31","^Z","^["]]]],"^L","Executes a message call or transaction, which is directly executed in the VM\n  of the node, but never mined into the blockchain and returns the amount of the\n  gas used.\n\n  Parameters:\n  web3          - web3 instance\n  call-object   - See `(send-transaction!)`, except that all properties are\n                  optional.\n  callback-fn   - callback with two parameters, error and result\n\n  Returns the used gas for the simulated call/transaction.\n\n  Example:\n  user> `(estimate-gas web3-instance\n           {:to   \"0x135a7de83802408321b74c322f8558db1679ac20\",\n            :data \"0x135a7de83802408321b74c322f8558db1679ac20\"}\n           (fn [err res] (when-not err (println res))))`\n  nil\n  user> 22361"],"^5",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/eth.cljs","^D",781,"^E",7,"^F",781,"^G",13,"^H",["^I",["^J",["^I",[["^K","~$&","^["]]]]],"^L","Parameters:\n  web3          - web3 instance\n  block-or-transaction  - The string \"latest\" or \"pending\" to watch\n                          for changes in the latest block or pending\n                          transactions respectively. Or a filter options\n                          object as follows:\n\n    from-block: Number|String - The number of the earliest block (latest may be\n                                given to mean the most recent and pending\n                                currently mining, block). By default\n                               latest.\n    to-block: Number|String   - The number of the latest block (latest may be\n                                given to mean the most recent and pending\n                                currently mining, block). By default latest.\n\n    address: String           - An address or a list of addresses to only get\n                                logs from particular account(s).\n\n    :topics: Array of Strings - An array of values which must each appear in the\n                                log entries. The order is important, if you want\n                                to leave topics out use null, e.g.\n                                `[null, '0x00...']`. You can also pass another array\n                                for each topic with options for that topic e.g.\n                                `[null, ['option1', 'option2']]`\n\n  Returns a filter object with the following methods:\n\n    `(.get filter callback-fn)`:   Returns all of the log entries that fit the\n                                   filter.\n    `(.watch filter callback-fn)`: Watches for state changes that fit the\n                                   filter and calls the callback.\n    `(.stopWatching filter)`:      Stops the watch and uninstalls the filter in the\n                                   node. Should always be called once it is done.\n\n  Watch callback return value\n\n    String - When using the \"latest\" parameter, it returns the block hash of\n             the last incoming block.\n\n    String - When using the \"pending\" parameter, it returns a transaction hash\n             of the most recent pending transaction.\n    Object - When using manual filter options, it returns a log object as follows:\n\n        logIndex: Number - integer of the log index position in the block. null\n                           when its pending log.\n        transactionIndex: Number - integer of the transactions index position log\n                                   was created from. null when its pending log.\n        transactionHash: String, 32 Bytes - hash of the transactions this log was\n                                            created from. null when its pending log.\n        blockHash: String, 32 Bytes - hash of the block where this log was in. null\n                                      when its pending. null when its pending log.\n        blockNumber: Number - the block number where this log was in. null when its\n                              pending. null when its pending log.\n        address: String, 32 Bytes - address from which this log originated.\n        data: String - contains one or more 32 Bytes non-indexed arguments of the log.\n\n        topics: Array of Strings - Array of 0 to 4 32 Bytes DATA of indexed log\n                                   arguments. (In solidity: The first topic is the hash\n                                   of the signature of the event, except if you declared the\n                                   event with the anonymous specifier.)\n\n  Note for event filter return values see Contract Events at\n  https://github.com/ethereum/wiki/wiki/JavaScript-API#contract-events","^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^K","^["]]],"^H",["^I",[["^K","~$&","^["]]],"^Q",["^I",[null]]]],"^6","~$cljs-web3.eth/filter","^N",true,"^C","resources/public/js/compiled/out/cljs_web3/eth.cljs","^G",13,"^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^K","^["]]],"^H",["^I",[["^K","~$&","^["]]],"^Q",["^I",[null]]],"^O",[["^I",["^K","^["]]],"^P",null,"^Q",["^I",[null]],"^E",1,"^D",781,"^F",781,"^R",1,"^S",true,"^H",["^I",[["^K","~$&","^["]]],"^L","Parameters:\n  web3          - web3 instance\n  block-or-transaction  - The string \"latest\" or \"pending\" to watch\n                          for changes in the latest block or pending\n                          transactions respectively. Or a filter options\n                          object as follows:\n\n    from-block: Number|String - The number of the earliest block (latest may be\n                                given to mean the most recent and pending\n                                currently mining, block). By default\n                               latest.\n    to-block: Number|String   - The number of the latest block (latest may be\n                                given to mean the most recent and pending\n                                currently mining, block). By default latest.\n\n    address: String           - An address or a list of addresses to only get\n                                logs from particular account(s).\n\n    :topics: Array of Strings - An array of values which must each appear in the\n                                log entries. The order is important, if you want\n                                to leave topics out use null, e.g.\n                                `[null, '0x00...']`. You can also pass another array\n                                for each topic with options for that topic e.g.\n                                `[null, ['option1', 'option2']]`\n\n  Returns a filter object with the following methods:\n\n    `(.get filter callback-fn)`:   Returns all of the log entries that fit the\n                                   filter.\n    `(.watch filter callback-fn)`: Watches for state changes that fit the\n                                   filter and calls the callback.\n    `(.stopWatching filter)`:      Stops the watch and uninstalls the filter in the\n                                   node. Should always be called once it is done.\n\n  Watch callback return value\n\n    String - When using the \"latest\" parameter, it returns the block hash of\n             the last incoming block.\n\n    String - When using the \"pending\" parameter, it returns a transaction hash\n             of the most recent pending transaction.\n    Object - When using manual filter options, it returns a log object as follows:\n\n        logIndex: Number - integer of the log index position in the block. null\n                           when its pending log.\n        transactionIndex: Number - integer of the transactions index position log\n                                   was created from. null when its pending log.\n        transactionHash: String, 32 Bytes - hash of the transactions this log was\n                                            created from. null when its pending log.\n        blockHash: String, 32 Bytes - hash of the block where this log was in. null\n                                      when its pending. null when its pending log.\n        blockNumber: Number - the block number where this log was in. null when its\n                              pending. null when its pending log.\n        address: String, 32 Bytes - address from which this log originated.\n        data: String - contains one or more 32 Bytes non-indexed arguments of the log.\n\n        topics: Array of Strings - Array of 0 to 4 32 Bytes DATA of indexed log\n                                   arguments. (In solidity: The first topic is the hash\n                                   of the signature of the event, except if you declared the\n                                   event with the anonymous specifier.)\n\n  Note for event filter return values see Contract Events at\n  https://github.com/ethereum/wiki/wiki/JavaScript-API#contract-events"],"~$namereg",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/eth.cljs","^D",873,"^E",7,"^F",873,"^G",14,"^H",["^I",["^J",["^I",[["^K"]]]]],"^L","Returns GlobalRegistrar object.\n\n  See https://github.com/ethereum/web3.js/blob/master/example/namereg.html\n  for an example in JavaScript."],"^6","~$cljs-web3.eth/namereg","^N",false,"^C","resources/public/js/compiled/out/cljs_web3/eth.cljs","^G",14,"^O",["^I",[["^K"]]],"^P",null,"^Q",["^I",[null,null]],"^E",1,"^D",873,"^F",873,"^R",1,"^S",true,"^H",["^I",["^J",["^I",[["^K"]]]]],"^L","Returns GlobalRegistrar object.\n\n  See https://github.com/ethereum/web3.js/blob/master/example/namereg.html\n  for an example in JavaScript."],"~$call!",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/eth.cljs","^D",729,"^E",7,"^F",729,"^G",12,"^H",["^I",["^J",["^I",[["^K","~$&",["^31","^1B","^Z","^["]]]]]],"^L","Executes a message call transaction, which is directly executed in the VM of\n  the node, but never mined into the blockchain.\n\n  Parameters:\n  web3          - web3 instance\n  call-object   - A transaction object see web3.eth.sendTransaction, with the\n                  difference that for calls the from property is optional as\n                  well.\n  default-block - If you pass this parameter it will not use the default block\n                  set with set-default-block.\n  callback-fn   - callback with two parameters, error and result\n\n  Returns the returned data of the call as string, e.g. a codes functions return\n  value.\n\n  Example:\n  user> `(call! web3-instance {:to   \"0x\"\n                               :data \"0x\"}\n                (fn [err res] (when-not err (println res))))`\n  nil\n  user> 0x","^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^K",["^31","^1B","^Z","^["]]]],"^H",["^I",[["^K","~$&",["^31","^1B","^Z","^["]]]],"^Q",["^I",[null]]]],"^6","~$cljs-web3.eth/call!","^N",true,"^C","resources/public/js/compiled/out/cljs_web3/eth.cljs","^G",12,"^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^K",["^31","^1B","^Z","^["]]]],"^H",["^I",[["^K","~$&",["^31","^1B","^Z","^["]]]],"^Q",["^I",[null]]],"^O",[["^I",["^K",["^31","^1B","^Z","^["]]]],"^P",null,"^Q",["^I",[null]],"^E",1,"^D",729,"^F",729,"^R",1,"^S",true,"^H",["^I",[["^K","~$&",["^31","^1B","^Z","^["]]]],"^L","Executes a message call transaction, which is directly executed in the VM of\n  the node, but never mined into the blockchain.\n\n  Parameters:\n  web3          - web3 instance\n  call-object   - A transaction object see web3.eth.sendTransaction, with the\n                  difference that for calls the from property is optional as\n                  well.\n  default-block - If you pass this parameter it will not use the default block\n                  set with set-default-block.\n  callback-fn   - callback with two parameters, error and result\n\n  Returns the returned data of the call as string, e.g. a codes functions return\n  value.\n\n  Example:\n  user> `(call! web3-instance {:to   \"0x\"\n                               :data \"0x\"}\n                (fn [err res] (when-not err (println res))))`\n  nil\n  user> 0x"],"~$register",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/eth.cljs","^D",269,"^E",7,"^F",269,"^G",15,"^H",["^I",["^J",["^I",[["^K","^1A"]]]]],"^L","(Not Implemented yet) Registers the given address to be included in\n  `accounts`. This allows non-private-key owned accounts to be associated\n  as an owned account (e.g., contract wallets).\n\n  Parameters:\n  web3        - web3 instance\n  address     - string representing the address\n  callback-fn - callback with two parameters, error and result."],"^6","~$cljs-web3.eth/register","^N",false,"^C","resources/public/js/compiled/out/cljs_web3/eth.cljs","^G",15,"^O",["^I",[["^K","^1A"]]],"^P",null,"^Q",["^I",[null,null]],"^E",1,"^D",269,"^F",269,"^R",2,"^S",true,"^H",["^I",["^J",["^I",[["^K","^1A"]]]]],"^L","(Not Implemented yet) Registers the given address to be included in\n  `accounts`. This allows non-private-key owned accounts to be associated\n  as an owned account (e.g., contract wallets).\n\n  Parameters:\n  web3        - web3 instance\n  address     - string representing the address\n  callback-fn - callback with two parameters, error and result."],"~$contract-get-data",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/eth.cljs","^D",971,"^E",7,"^F",971,"^G",24,"^H",["^I",["^J",["^I",[["^1H","^1I","~$&","^["]]]]],"^10",["^ ","^N",true,"^R",2,"^O",[["^I",["^1H","^1I","^["]]],"^H",["^I",[["^1H","^1I","~$&","^["]]],"^Q",["^I",[null]]]],"^6","~$cljs-web3.eth/contract-get-data","^N",true,"^C","resources/public/js/compiled/out/cljs_web3/eth.cljs","^G",24,"^10",["^ ","^N",true,"^R",2,"^O",[["^I",["^1H","^1I","^["]]],"^H",["^I",[["^1H","^1I","~$&","^["]]],"^Q",["^I",[null]]],"^O",[["^I",["^1H","^1I","^["]]],"^P",null,"^Q",["^I",[null]],"^E",1,"^D",971,"^F",971,"^R",2,"^S",true,"^H",["^I",[["^1H","^1I","~$&","^["]]]],"~$send-iban-transaction!",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/eth.cljs","^D",662,"^E",7,"^F",662,"^G",29,"^H",["^I",["^J",["^I",[["^K","~$&",["~$from","~$iban-address","~$value","^Z","^["]]]]]],"^L","Sends IBAN transaction from user account to destination IBAN address.\n\n  Parameters:\n  web3          - web3 instance\n  from          - address from which we want to send transaction\n  iban-address  - IBAN address to which we want to send transaction\n  value         - value that we want to send in IBAN transaction\n  callback-fn   - callback with two parameters, error and result\n\n  Note: uses smart contract to transfer money to IBAN account.\n\n  Example:\n  user> `(send-iban-transaction! '0xx'\n                                 'NL88YADYA02'\n                                  0x100\n                                  (fn [err res] (prn res)))`","^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^K",["^3=","^3>","^3?","^Z","^["]]]],"^H",["^I",[["^K","~$&",["^3=","^3>","^3?","^Z","^["]]]],"^Q",["^I",[null]]]],"^6","~$cljs-web3.eth/send-iban-transaction!","^N",true,"^C","resources/public/js/compiled/out/cljs_web3/eth.cljs","^G",29,"^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^K",["^3=","^3>","^3?","^Z","^["]]]],"^H",["^I",[["^K","~$&",["^3=","^3>","^3?","^Z","^["]]]],"^Q",["^I",[null]]],"^O",[["^I",["^K",["^3=","^3>","^3?","^Z","^["]]]],"^P",null,"^Q",["^I",[null]],"^E",1,"^D",662,"^F",662,"^R",1,"^S",true,"^H",["^I",[["^K","~$&",["^3=","^3>","^3?","^Z","^["]]]],"^L","Sends IBAN transaction from user account to destination IBAN address.\n\n  Parameters:\n  web3          - web3 instance\n  from          - address from which we want to send transaction\n  iban-address  - IBAN address to which we want to send transaction\n  value         - value that we want to send in IBAN transaction\n  callback-fn   - callback with two parameters, error and result\n\n  Note: uses smart contract to transfer money to IBAN account.\n\n  Example:\n  user> `(send-iban-transaction! '0xx'\n                                 'NL88YADYA02'\n                                  0x100\n                                  (fn [err res] (prn res)))`"],"~$get-compile",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/eth.cljs","^D",16,"^E",7,"^F",16,"^G",18,"^H",["^I",["^J",["^I",[["^K"]]]]],"^L","Gets compile object from web3-instance.\n\n  Parameter:\n  web3 - web3 instance"],"^6","~$cljs-web3.eth/get-compile","^N",false,"^C","resources/public/js/compiled/out/cljs_web3/eth.cljs","^G",18,"^O",["^I",[["^K"]]],"^P",null,"^Q",["^I",[null,null]],"^E",1,"^D",16,"^F",16,"^R",1,"^S",true,"^H",["^I",["^J",["^I",[["^K"]]]]],"^L","Gets compile object from web3-instance.\n\n  Parameter:\n  web3 - web3 instance"],"~$syncing?",["^ ","^A",null,"^B",["^ ","^C","/Users/matus/www/district0x/tcrfactory/resources/public/js/compiled/out/cljs_web3/eth.cljs","^D",143,"^E",7,"^F",143,"^G",15,"^H",["^I",["^J",["^I",[["^K","~$&","^["]]]]],"^L","This convenience function calls the callback everytime a sync starts, updates\n  and stops.\n\n  Parameters:\n  web3 - web3 instance\n\n  Returns an isSyncing object with the following methods:\n  - `.addCallback`  Adds another callback, which will be called when the node\n                    starts or stops syncing.\n  - `.stopWatching` Stops the syncing callbacks\n\n  Callback return value:\n\n    The callback will be fired with true when the syncing starts and with false\n    when it stopped.\n\n    While syncing it will return the syncing object:\n    - startingBlock: The block number where the sync started.\n    - currentBlock:  The block number where at which block the node currently\n                     synced to already.\n    - highestBlock:  The estimated block number to sync to\n\n  Example:\n  user> `(.addCallback (web3-eth/syncing? web3-instance) (fn [err res] ...))`\n  #object[s [object Object]]","^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^K","^["]]],"^H",["^I",[["^K","~$&","^["]]],"^Q",["^I",[null]]]],"^6","~$cljs-web3.eth/syncing?","^N",true,"^C","resources/public/js/compiled/out/cljs_web3/eth.cljs","^G",15,"^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^K","^["]]],"^H",["^I",[["^K","~$&","^["]]],"^Q",["^I",[null]]],"^O",[["^I",["^K","^["]]],"^P",null,"^Q",["^I",[null]],"^E",1,"^D",143,"^F",143,"^R",1,"^S",true,"^H",["^I",[["^K","~$&","^["]]],"^L","This convenience function calls the callback everytime a sync starts, updates\n  and stops.\n\n  Parameters:\n  web3 - web3 instance\n\n  Returns an isSyncing object with the following methods:\n  - `.addCallback`  Adds another callback, which will be called when the node\n                    starts or stops syncing.\n  - `.stopWatching` Stops the syncing callbacks\n\n  Callback return value:\n\n    The callback will be fired with true when the syncing starts and with false\n    when it stopped.\n\n    While syncing it will return the syncing object:\n    - startingBlock: The block number where the sync started.\n    - currentBlock:  The block number where at which block the node currently\n                     synced to already.\n    - highestBlock:  The estimated block number to sync to\n\n  Example:\n  user> `(.addCallback (web3-eth/syncing? web3-instance) (fn [err res] ...))`\n  #object[s [object Object]]"]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"^L","Contains the ethereum blockchain related methods."]